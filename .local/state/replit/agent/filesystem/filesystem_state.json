{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is an AI-powered learning platform called LearnAI that creates personalized educational experiences using Google's Gemini AI. The application follows a structured 4-stage learning workflow: Analysis (initial assessment through questions), Feedback (AI evaluation of answers), Teaching (personalized content generation), and Retest (progress validation). The platform supports multiple education levels and difficulty settings, tracks knowledge areas and proficiency scores, and maintains learning history.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **Routing**: Wouter for client-side routing with pages for home, analysis, feedback, teaching, history, and progress\n- **State Management**: React Context API with custom SessionProvider for global session state management\n- **UI Components**: Radix UI primitives with custom shadcn/ui components and Tailwind CSS for styling\n- **Data Fetching**: TanStack Query (React Query) for server state management and caching\n- **Form Handling**: React Hook Form with Zod validation schemas\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful endpoints for sessions, questions, answers, and knowledge areas\n- **Development**: Hot module replacement with Vite middleware in development mode\n- **Production**: Static file serving with Express in production builds\n\n## Data Storage Solutions\n- **ORM**: Drizzle ORM with PostgreSQL dialect for type-safe database operations\n- **Database**: Neon Database (PostgreSQL) for cloud-hosted data persistence\n- **Schema**: Shared TypeScript schemas using Drizzle and Zod for validation\n- **Tables**: Users, sessions, questions, answers, and knowledge areas with proper relationships\n- **Local Storage**: Browser localStorage for client-side session persistence and history\n\n## Authentication and Authorization\n- **Session Management**: Express sessions with PostgreSQL session store (connect-pg-simple)\n- **User System**: Basic user authentication with username/password stored in PostgreSQL\n- **Security**: Session-based authentication with secure HTTP-only cookies\n\n## External Dependencies\n- **AI Service**: Google Generative AI (Gemini 1.5 Flash) for question generation, answer evaluation, and teaching content creation\n- **Database**: Neon Database for PostgreSQL cloud hosting\n- **Deployment**: Vercel for production deployment with build optimization\n- **Styling**: Tailwind CSS with custom theme configuration and shadcn/ui design system\n- **Icons**: Lucide React for consistent iconography throughout the application\n\nThe architecture supports real-time learning sessions with AI-powered content generation, progress tracking across knowledge areas, and a responsive design that works on both desktop and mobile devices.","size_bytes":2973},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport themePlugin from \"@replit/vite-plugin-shadcn-theme-json\";\nimport path, { dirname } from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\nimport { fileURLToPath } from \"url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    themePlugin(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n      \"@assets\": path.resolve(__dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":1069},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â€¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1921},"server/routes.ts":{"content":"import { Express, Request, Response, NextFunction } from \"express\";\nimport { Server, createServer } from \"http\";\nimport { storage } from \"./storage\";\nimport {\n  insertSessionSchema,\n  insertQuestionSchema,\n  insertAnswerSchema,\n  insertKnowledgeAreaSchema,\n  EvaluationResult,\n  TestResult,\n  Question,\n  Answer,\n  QuestionWithAnswer,\n  BatchEvaluationResult\n} from \"@shared/schema\";\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Initialize Google AI with the provided API key\n  if (!process.env.GEMINI_API_KEY) {\n    console.error(\"GEMINI_API_KEY environment variable is not set!\");\n    throw new Error(\"GEMINI_API_KEY is required to use AI features\");\n  }\n  const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);\n  const model = genAI.getGenerativeModel({ model: \"gemini-2.0-flash\" });\n\n  // Health check endpoint\n  app.get('/api/health', (req: Request, res: Response) => {\n    res.json({ status: 'ok' });\n  });\n\n  // Session endpoints\n  app.post('/api/sessions', async (req: Request, res: Response) => {\n    try {\n      const sessionData = insertSessionSchema.parse(req.body);\n      const newSession = await storage.createSession(sessionData);\n      res.status(201).json(newSession);\n    } catch (error) {\n      res.status(400).json({ message: 'Invalid session data', error });\n    }\n  });\n\n  app.get('/api/sessions/:id', async (req: Request, res: Response) => {\n    const sessionId = parseInt(req.params.id);\n    if (isNaN(sessionId)) {\n      return res.status(400).json({ message: 'Invalid session ID' });\n    }\n    \n    const session = await storage.getSessionWithKnowledgeAreas(sessionId);\n    if (!session) {\n      return res.status(404).json({ message: 'Session not found' });\n    }\n    \n    res.json(session);\n  });\n\n  app.patch('/api/sessions/:id/stage', async (req: Request, res: Response) => {\n    const sessionId = parseInt(req.params.id);\n    if (isNaN(sessionId)) {\n      return res.status(400).json({ message: 'Invalid session ID' });\n    }\n    \n    const { stage } = req.body;\n    if (!stage || typeof stage !== 'string') {\n      return res.status(400).json({ message: 'Invalid stage' });\n    }\n    \n    const updatedSession = await storage.updateSessionStage(sessionId, stage);\n    if (!updatedSession) {\n      return res.status(404).json({ message: 'Session not found' });\n    }\n    \n    res.json(updatedSession);\n  });\n\n  // Question endpoints\n  app.post('/api/questions/generate', async (req: Request, res: Response) => {\n    try {\n      const { topic, sessionId } = req.body;\n      if (!topic || !sessionId) {\n        return res.status(400).json({ message: 'Topic and sessionId are required' });\n      }\n      \n      // Get existing questions to check for duplicates\n      const existingQuestions = await storage.getSessionQuestions(sessionId);\n      const existingQuestionsText = existingQuestions.map(q => q.question.toLowerCase());\n      \n      // Extract education and difficulty levels from topic if present\n      // Format: \"TOPIC [Education: LEVEL, Difficulty: LEVEL]\"\n      let educationLevel = \"Class 9-10\"; // Default\n      let difficultyLevel = \"Standard\"; // Default\n      let pureTopic = topic;\n      \n      const metadataMatch = topic.match(/\\[(.*?)\\]/);\n      if (metadataMatch) {\n        pureTopic = topic.replace(/\\s*\\[.*?\\]$/, \"\").trim();\n        \n        const metadata = metadataMatch[1];\n        const educationMatch = metadata.match(/Education:\\s*(.*?)(?:,|$)/);\n        if (educationMatch) {\n          educationLevel = educationMatch[1].trim();\n        }\n        \n        const difficultyMatch = metadata.match(/Difficulty:\\s*(.*?)(?:,|$)/);\n        if (difficultyMatch) {\n          difficultyLevel = difficultyMatch[1].trim();\n        }\n      }\n      \n      // Map difficulty level to AI-generated question difficulty\n      let easyCount = 2;\n      let mediumCount = 2;\n      let hardCount = 2;\n      \n      // Adjust difficulty distribution based on selected level\n      if (difficultyLevel === \"Beginner\") {\n        easyCount = 4;\n        mediumCount = 2;\n        hardCount = 0;\n      } else if (difficultyLevel === \"Advanced\") {\n        easyCount = 0;\n        mediumCount = 2;\n        hardCount = 4;\n      }\n      \n      // Add context to make generated questions more unique\n      let contextPrompt = \"\";\n      if (existingQuestionsText.length > 0) {\n        contextPrompt = `I already have the following questions in my test (DO NOT repeat these or create similar questions):\\n${existingQuestionsText.join('\\n')}\\n\\n`;\n      }\n      \n      const prompt = `${contextPrompt}Generate UNIQUE and diverse questions on ${pureTopic} to test my knowledge.\n      \n      The student is at education level: ${educationLevel}.\n      The desired difficulty level is: ${difficultyLevel}.\n      \n      IMPORTANT: Each question must test a different concept within ${pureTopic}. Do not create questions that are similar to each other.\n      Tailor the questions to be appropriate for someone at the ${educationLevel} education level.\n      \n      Format the response as a JSON array of objects, where each object has 'question' and 'difficulty' properties. Difficulty should be one of: 'easy', 'medium', or 'hard'.\n      \n      Give me 6 questions total: ${easyCount} easy, ${mediumCount} medium, and ${hardCount} hard questions.\n      \n      Make sure every question is testing a completely different aspect of ${pureTopic}.`;\n      \n      try {\n        const result = await model.generateContent(prompt);\n        const response = await result.response;\n        const text = response.text();\n        \n        // Parse the response and extract questions\n        let questions = [];\n        try {\n          // Look for JSON-like structure in the text\n          const jsonMatch = text.match(/\\[[\\s\\S]*\\]/);\n          if (jsonMatch) {\n            questions = JSON.parse(jsonMatch[0]);\n          } else {\n            // Fallback: Parse from text if JSON structure not found\n            const lines = text.split('\\n');\n            for (const line of lines) {\n              if (line.includes('Question') && (line.includes('easy') || line.includes('medium') || line.includes('hard'))) {\n                const difficulty = line.includes('easy') ? 'easy' : line.includes('medium') ? 'medium' : 'hard';\n                const question = line.replace(/^.*?:\\s*/, '');\n                questions.push({ question, difficulty });\n              }\n            }\n          }\n        } catch (error) {\n          console.error('Failed to parse questions from AI response:', error);\n          return res.status(500).json({ message: 'Failed to parse questions from AI response' });\n        }\n        \n        // Save questions to storage\n        const savedQuestions = [];\n        for (const q of questions) {\n          const questionData = insertQuestionSchema.parse({\n            sessionId,\n            question: q.question,\n            difficulty: q.difficulty\n          });\n          const savedQuestion = await storage.createQuestion(questionData);\n          savedQuestions.push(savedQuestion);\n        }\n        \n        res.json({ questions: savedQuestions });\n      } catch (error) {\n        console.error('Error generating content from AI:', error);\n        return res.status(500).json({ message: 'Error generating content from AI', error });\n      }\n    } catch (error) {\n      console.error('Error generating questions:', error);\n      res.status(500).json({ message: 'Failed to generate questions', error });\n    }\n  });\n\n  app.get('/api/sessions/:sessionId/questions', async (req: Request, res: Response) => {\n    const sessionId = parseInt(req.params.sessionId);\n    if (isNaN(sessionId)) {\n      return res.status(400).json({ message: 'Invalid session ID' });\n    }\n    \n    const questions = await storage.getSessionQuestions(sessionId);\n    res.json({ questions });\n  });\n\n  app.get('/api/sessions/:sessionId/questions-with-answers', async (req: Request, res: Response) => {\n    const sessionId = parseInt(req.params.sessionId);\n    if (isNaN(sessionId)) {\n      return res.status(400).json({ message: 'Invalid session ID' });\n    }\n    \n    const questionsWithAnswers = await storage.getSessionQuestionsWithAnswers(sessionId);\n    res.json({ questionsWithAnswers });\n  });\n  \n  // Endpoint to get correct answers for all questions in a session\n  app.get('/api/sessions/:sessionId/correct-answers', async (req: Request, res: Response) => {\n    const sessionId = parseInt(req.params.sessionId);\n    if (isNaN(sessionId)) {\n      return res.status(400).json({ message: 'Invalid session ID', success: false });\n    }\n    \n    try {\n      // Get all questions for the session\n      const questions = await storage.getSessionQuestions(sessionId);\n      if (!questions || questions.length === 0) {\n        return res.status(404).json({ \n          message: 'No questions found for this session', \n          success: false,\n          answers: []\n        });\n      }\n      \n      // Generate correct answers using AI\n      const session = await storage.getSession(sessionId);\n      if (!session) {\n        return res.status(404).json({ \n          message: 'Session not found', \n          success: false,\n          answers: []\n        });\n      }\n      \n      const topic = session.topic;\n      const answers = [];\n      \n      for (const question of questions) {\n        try {\n          // Generate the correct answer using Gemini\n          const prompt = `\n            You are an expert educational assistant. Please provide a correct answer to \n            the following question on the topic of ${topic}:\n            \n            Question: ${question.question}\n            \n            Provide a clear, accurate, and concise answer.\n          `;\n          \n          const result = await model.generateContent(prompt);\n          const response = result.response;\n          const correctAnswer = response.text().trim();\n          \n          answers.push({\n            questionId: question.id,\n            correctAnswer\n          });\n        } catch (error) {\n          console.error(`Error generating correct answer for question ${question.id}:`, error);\n          // Include a placeholder error message instead of failing the entire request\n          answers.push({\n            questionId: question.id,\n            correctAnswer: \"Sorry, we couldn't generate the correct answer for this question.\"\n          });\n        }\n      }\n      \n      res.json({\n        success: true,\n        message: \"Correct answers generated successfully\",\n        answers\n      });\n    } catch (error) {\n      console.error(\"Error generating correct answers:\", error);\n      res.status(500).json({ \n        message: \"Failed to generate correct answers\", \n        success: false,\n        answers: []\n      });\n    }\n  });\n\n  // Answer endpoints\n  app.post('/api/answers', async (req: Request, res: Response) => {\n    try {\n      const { questionId, userAnswer, deferEvaluation } = req.body;\n      if (!questionId || !userAnswer) {\n        return res.status(400).json({ message: 'Question ID and user answer are required' });\n      }\n      \n      // Get the question details - this can be done in parallel with further processing\n      const questionPromise = storage.getQuestion(questionId);\n      \n      // Create a temporary record with minimal data to respond quickly to the client\n      // This allows the client to move on to the next question while evaluation happens\n      // Convert the object to something we can send over JSON\n      // The actual Answer type requires createdAt to be a Date object\n      // but for the response we can use a modified version\n      const tempAnswer = {\n        id: -1, // Will be replaced by actual ID\n        questionId,\n        userAnswer,\n        evaluation: {\n          correctness: 0,\n          feedback: deferEvaluation ? \"Evaluation deferred until test completion\" : \"Evaluating your answer...\",\n          strengths: [],\n          weaknesses: []\n        },\n        createdAt: new Date().toISOString()\n      };\n      \n      // If deferEvaluation is true, we'll save the answer without evaluating it\n      if (deferEvaluation) {\n        const answerData = insertAnswerSchema.parse({\n          questionId,\n          userAnswer,\n          evaluation: {\n            correctness: 0,\n            feedback: \"Pending evaluation at test completion\",\n            strengths: [],\n            weaknesses: []\n          }\n        });\n        \n        const savedAnswer = await storage.createAnswer(answerData);\n        return res.status(200).json(savedAnswer);\n      }\n      \n      // Send a quick initial response so the client can proceed\n      // This is a performance optimization - the client doesn't need to wait for AI evaluation\n      res.status(202).json(tempAnswer);\n      \n      // Now continue with the actual evaluation asynchronously\n      const question = await questionPromise;\n      if (!question) {\n        console.error(`Question with ID ${questionId} not found`);\n        return; // The client already received a response, so just log the error\n      }\n      \n      // Evaluate the answer using AI\n      const prompt = `Question: ${question.question}\\nStudent's Answer: ${userAnswer}\\n\\nEvaluate this answer based on correctness, depth, and clarity. Provide a JSON object with the following structure:\n      {\n        \"correctness\": <number between 0-100>,\n        \"feedback\": \"<detailed feedback>\",\n        \"strengths\": [\"<strength1>\", \"<strength2>\", ...],\n        \"weaknesses\": [\"<weakness1>\", \"<weakness2>\", ...]\n      }`;\n      \n      try {\n        const result = await model.generateContent(prompt);\n        const response = await result.response;\n        const text = response.text();\n        \n        // Parse the evaluation\n        let evaluation;\n        try {\n          // Extract JSON from response\n          const jsonMatch = text.match(/{[\\s\\S]*}/);\n          if (jsonMatch) {\n            evaluation = JSON.parse(jsonMatch[0]);\n          } else {\n            throw new Error('No JSON found in AI response');\n          }\n        } catch (error) {\n          console.error('Failed to parse evaluation from AI response:', error);\n          // Continue with default evaluation since we already sent a response\n          evaluation = {\n            correctness: 50,\n            feedback: \"We had trouble evaluating your answer automatically.\",\n            strengths: [\"Submission received\"],\n            weaknesses: [\"Evaluation process encountered an error\"]\n          };\n        }\n        \n        // Save the answer and complete evaluation to the database\n        const answerData = insertAnswerSchema.parse({\n          questionId,\n          userAnswer,\n          evaluation\n        });\n        \n        await storage.createAnswer(answerData);\n        // We don't need to send a response here since we already sent one\n      } catch (error) {\n        console.error('Error generating content from AI:', error);\n        // We already sent a response to client, so just log the error\n      }\n    } catch (error) {\n      console.error('Error in answer submission process:', error);\n      // If we haven't sent a response yet, send an error\n      if (!res.headersSent) {\n        res.status(500).json({ message: 'Failed to process answer submission', error });\n      }\n    }\n  });\n  \n  // Simplified endpoint to evaluate all answers at once and provide overall evaluation\n  app.post('/api/sessions/:sessionId/evaluate-all-answers', async (req: Request, res: Response) => {\n    try {\n      console.log(\"Starting batch evaluation process\");\n      \n      const sessionId = parseInt(req.params.sessionId);\n      if (isNaN(sessionId)) {\n        return res.status(400).json({ message: 'Invalid session ID' });\n      }\n      \n      // Get the session with knowledge areas\n      const session = await storage.getSession(sessionId);\n      if (!session) {\n        return res.status(404).json({ message: 'Session not found' });\n      }\n      \n      // Get all questions with answers for this session\n      const answeredQuestions = await storage.getSessionQuestionsWithAnswers(sessionId);\n      console.log(`Found ${answeredQuestions.length} questions for session ${sessionId}`);\n      \n      // Only evaluate if there are answered questions\n      if (answeredQuestions.length === 0 || answeredQuestions.every(q => !q.answer)) {\n        return res.status(400).json({ \n          message: 'No answered questions found for this session',\n          success: false\n        });\n      }\n      \n      // Simplified direct approach: directly call the Gemini API\n      try {\n        // Prepare the batch evaluation prompt\n        let promptText = `I've completed a test on ${session.topic}. Please evaluate my performance:\n\nQuestions and My Answers:\n`;\n        \n        // Add each question and answer to the prompt\n        answeredQuestions.forEach((qa: QuestionWithAnswer, index: number) => {\n          promptText += `\\nQuestion ${index + 1}: ${qa.question}\\n`;\n          promptText += `My Answer: ${qa.answer?.userAnswer || \"No answer provided\"}\\n`;\n        });\n        \n        promptText += `\nBased on my answers, provide:\n1. An overall score (0-100) for my test\n2. 2-3 clear strengths in my understanding\n3. 2-3 areas where I need improvement\n4. 2-3 specific topics I should study more\n\nFormat your response ONLY as a JSON object like this:\n{\n  \"totalScore\": 75,\n  \"strengths\": [\"strength1\", \"strength2\", \"strength3\"],\n  \"weaknesses\": [\"weakness1\", \"weakness2\", \"weakness3\"],\n  \"recommendedAreas\": [\"area1\", \"area2\"]\n}\n\nIMPORTANT: DO NOT include any text outside of this JSON object.`;\n        \n        console.log(\"Sending evaluation request to Gemini API\");\n        \n        // Direct call to Gemini with timeout handling\n        const timeoutPromise = new Promise((_, reject) => \n          setTimeout(() => reject(new Error(\"AI request timed out\")), 15000)\n        );\n        \n        const responsePromise = model.generateContent(promptText);\n        const result = await Promise.race([responsePromise, timeoutPromise]) as any;\n        const response = await result.response;\n        const text = response.text();\n        \n        console.log(\"Received response from Gemini API\");\n        \n        // Extract and parse the JSON\n        let evaluation;\n        try {\n          // More robust JSON extraction with fallback\n          const jsonMatch = text.match(/{[\\s\\S]*}/);\n          if (!jsonMatch) {\n            console.error(\"No valid JSON found in response\");\n            console.log(\"Raw response:\", text);\n            throw new Error('No valid JSON found in response');\n          }\n          \n          evaluation = JSON.parse(jsonMatch[0]);\n          \n          // Validate required fields\n          if (typeof evaluation.totalScore !== 'number' || \n              !Array.isArray(evaluation.strengths) || \n              !Array.isArray(evaluation.weaknesses)) {\n            throw new Error('Missing required fields in evaluation');\n          }\n          \n          console.log(\"Successfully parsed evaluation:\", evaluation);\n        } catch (parseError) {\n          console.error(\"Error parsing evaluation JSON:\", parseError);\n          \n          // Calculate an average score based on previous individual evaluations if available\n          let averageScore = 70; // Default fallback\n          const scoresFromPreviousEvals = answeredQuestions\n            .filter(qa => qa.answer && qa.answer.evaluation && typeof qa.answer.evaluation === 'object' && 'correctness' in qa.answer.evaluation)\n            .map(qa => {\n              const evaluation = qa.answer?.evaluation as { correctness: number };\n              return evaluation.correctness;\n            });\n          \n          if (scoresFromPreviousEvals.length > 0) {\n            averageScore = Math.round(scoresFromPreviousEvals.reduce((a, b) => a + b, 0) / scoresFromPreviousEvals.length);\n          }\n          \n          // Provide a more helpful fallback evaluation\n          evaluation = {\n            totalScore: averageScore,\n            strengths: [\n              \"You attempted to answer the questions\", \n              \"Your responses show engagement with the material\"\n            ],\n            weaknesses: [\n              \"Some concepts need deeper understanding\", \n              \"More detailed examples would improve your answers\"\n            ],\n            recommendedAreas: [\n              `Review core concepts of ${session.topic}`,\n              \"Practice applying concepts to specific scenarios\"\n            ]\n          };\n        }\n        \n        // Create a batch evaluation record\n        const batchEvaluationData = {\n          totalScore: evaluation.totalScore,\n          feedback: \"Your test has been evaluated based on your answers.\",\n          strengths: evaluation.strengths,\n          weaknesses: evaluation.weaknesses,\n          recommendedAreas: evaluation.recommendedAreas\n        };\n        \n        console.log(\"Saving evaluation to storage...\");\n        \n        // Store the evaluation in the first answer only for simplicity\n        if (answeredQuestions.length > 0 && answeredQuestions[0].answer) {\n          const firstAnswer = answeredQuestions[0];\n          \n          // Double-check that we still have an answer (TypeScript safety)\n          if (firstAnswer.answer) {\n            try {\n              const answerData = insertAnswerSchema.parse({\n                questionId: firstAnswer.id,\n                userAnswer: firstAnswer.answer.userAnswer,\n                evaluation: {\n                  correctness: evaluation.totalScore,\n                  feedback: \"See overall evaluation for details\",\n                  strengths: evaluation.strengths || [],\n                  weaknesses: evaluation.weaknesses || []\n                },\n                batchEvaluation: batchEvaluationData\n              });\n            \n              await storage.createAnswer(answerData);\n              console.log(\"Successfully stored batch evaluation in first answer\");\n            } catch (validationError) {\n              console.error(\"Error validating answer data:\", validationError);\n              // Continue with the response even if storage fails\n            }\n          }\n        }\n        \n        // Return success with evaluation summary\n        res.json({ \n          message: 'Evaluation completed successfully', \n          success: true,\n          evaluation: batchEvaluationData\n        });\n      } catch (error) {\n        console.error('Error during batch evaluation:', error);\n        \n        // Return a more informative error message\n        res.status(500).json({ \n          message: 'Error during evaluation. Please try again.',\n          success: false,\n          error: error instanceof Error ? error.message : String(error)\n        });\n      }\n    } catch (error) {\n      console.error('Unexpected error in evaluate-all-answers:', error);\n      res.status(500).json({ \n        message: 'Unexpected error during batch evaluation',\n        success: false\n      });\n    }\n  });\n\n  // Knowledge area endpoints\n  app.post('/api/knowledge-areas', async (req: Request, res: Response) => {\n    try {\n      const areaData = insertKnowledgeAreaSchema.parse(req.body);\n      const newArea = await storage.createKnowledgeArea(areaData);\n      res.status(201).json(newArea);\n    } catch (error) {\n      res.status(400).json({ message: 'Invalid knowledge area data', error });\n    }\n  });\n\n  app.patch('/api/knowledge-areas/:id', async (req: Request, res: Response) => {\n    const areaId = parseInt(req.params.id);\n    if (isNaN(areaId)) {\n      return res.status(400).json({ message: 'Invalid area ID' });\n    }\n    \n    const { proficiency } = req.body;\n    if (proficiency === undefined || typeof proficiency !== 'number') {\n      return res.status(400).json({ message: 'Invalid proficiency' });\n    }\n    \n    const updatedArea = await storage.updateKnowledgeArea(areaId, proficiency);\n    if (!updatedArea) {\n      return res.status(404).json({ message: 'Knowledge area not found' });\n    }\n    \n    res.json(updatedArea);\n  });\n\n  app.get('/api/sessions/:sessionId/knowledge-areas', async (req: Request, res: Response) => {\n    const sessionId = parseInt(req.params.sessionId);\n    if (isNaN(sessionId)) {\n      return res.status(400).json({ message: 'Invalid session ID' });\n    }\n    \n    const areas = await storage.getSessionKnowledgeAreas(sessionId);\n    res.json({ areas });\n  });\n\n  // Enhanced in-memory cache for AI responses with improved key generation\n  const aiResponseCache = new Map<string, { data: any, timestamp: number }>();\n  const CACHE_TTL = 1000 * 60 * 60; // 60 minutes cache lifetime for better performance\n  \n  // Helper function to get cached data or fetch from AI\n  async function getCachedOrFetchFromAI(cacheKey: string, promptFn: () => string, processFn: (text: string) => any) {\n    // Check if we have a valid cache entry\n    const cached = aiResponseCache.get(cacheKey);\n    if (cached && (Date.now() - cached.timestamp) < CACHE_TTL) {\n      console.log(`Using cached AI response for: ${cacheKey}`);\n      return cached.data;\n    }\n    \n    // Generate the prompt and fetch from AI\n    const prompt = promptFn();\n    \n    try {\n      // Use a timeout promise to ensure we don't wait too long\n      const timeoutPromise = new Promise((_, reject) => \n        setTimeout(() => reject(new Error(\"AI request timed out\")), 15000)\n      );\n      \n      const responsePromise = model.generateContent(prompt);\n      const result = await Promise.race([responsePromise, timeoutPromise]) as any;\n      const response = await result.response;\n      const text = response.text();\n      \n      // Process the text according to the provided function\n      const processedData = processFn(text);\n      \n      // Cache the result\n      aiResponseCache.set(cacheKey, {\n        data: processedData,\n        timestamp: Date.now()\n      });\n      \n      return processedData;\n    } catch (error) {\n      console.error('Error fetching from AI:', error);\n      throw error;\n    }\n  }\n  \n  // AI teaching mode endpoint\n  app.post('/api/teaching', async (req: Request, res: Response) => {\n    try {\n      const { topic, question } = req.body;\n      if (!topic || !question) {\n        return res.status(400).json({ message: 'Topic and question are required' });\n      }\n      \n      const cacheKey = `teaching:${topic}:${question}`;\n      \n      try {\n        const data = await getCachedOrFetchFromAI(\n          cacheKey,\n          () => `Hey buddy, I am stuck on ${topic}, specifically on \"${question}\". Can you teach me in an engaging way? \n            Break down this topic using:\n            1. Simple explanations\n            2. Real-life examples or analogies\n            3. Step-by-step learning\n            \n            After explaining, provide 1-2 follow-up questions to check my understanding.\n            Keep your response concise and focused.`,\n          (text) => {\n            // Extract follow-up questions\n            const followUpQuestions = [];\n            const lines = text.split('\\n');\n            let collectingQuestions = false;\n            \n            for (const line of lines) {\n              if (line.includes('follow-up') || line.includes('understanding') || line.includes('check your')) {\n                collectingQuestions = true;\n                continue;\n              }\n              \n              if (collectingQuestions && line.includes('?')) {\n                followUpQuestions.push(line.trim());\n              }\n            }\n            \n            return { \n              text, \n              followUpQuestions: followUpQuestions.length > 0 ? followUpQuestions : undefined \n            };\n          }\n        );\n        \n        res.json(data);\n      } catch (error) {\n        console.error('Error generating content from AI:', error);\n        // Return a fallback response that won't break the UI\n        return res.json({ \n          text: \"I'm having trouble connecting to the teaching service right now. Please try again in a moment.\",\n          followUpQuestions: [\"Would you like to try a different topic?\"] \n        });\n      }\n    } catch (error) {\n      console.error('Error in teaching mode:', error);\n      res.status(500).json({ message: 'Failed to generate teaching content', error });\n    }\n  });\n\n  // Generate study notes endpoint\n  app.post('/api/notes/generate', async (req: Request, res: Response) => {\n    try {\n      const { topic, weakAreas } = req.body;\n      if (!topic) {\n        return res.status(400).json({ message: 'Topic is required' });\n      }\n      \n      // Create a unique cache key based on the topic and weak areas\n      const weakAreasKey = weakAreas ? weakAreas.sort().join(',') : 'none';\n      const cacheKey = `notes:${topic}:${weakAreasKey}`;\n      \n      try {\n        const notes = await getCachedOrFetchFromAI(\n          cacheKey,\n          () => {\n            const weakAreasText = weakAreas && weakAreas.length > 0\n              ? `Focus particularly on these weak areas: ${weakAreas.join(', ')}.`\n              : '';\n              \n            return `Generate comprehensive study notes on ${topic}. ${weakAreasText}\n              Include:\n              1. Key concepts and definitions\n              2. Important principles\n              3. Examples or applications\n              4. Visual representations (described in text)\n              5. Common misconceptions\n              \n              Format the notes in Markdown for easy reading and structure.\n              Keep the notes concise and focused on the most important information.`;\n          },\n          (text) => {\n            // Simply return the notes text\n            return { notes: text };\n          }\n        );\n        \n        res.json(notes);\n      } catch (error) {\n        console.error('Error generating content from AI:', error);\n        // Return a fallback response with basic notes\n        return res.json({ \n          notes: `# ${topic} - Study Notes\\n\\nI apologize, but I'm currently experiencing technical difficulties generating detailed notes. Here are some basic points to get you started:\\n\\n## Key Concepts\\n- Study the fundamentals of ${topic}\\n- Focus on understanding core principles\\n- Practice with examples\\n\\nPlease try again in a few moments for more detailed notes.` \n        });\n      }\n    } catch (error) {\n      console.error('Error generating notes:', error);\n      res.status(500).json({ message: 'Failed to generate study notes', error });\n    }\n  });\n  \n  // Evaluate entire test endpoint\n  app.post('/api/sessions/:sessionId/evaluate', async (req: Request, res: Response) => {\n    try {\n      const sessionId = parseInt(req.params.sessionId);\n      if (isNaN(sessionId)) {\n        return res.status(400).json({ message: 'Invalid session ID' });\n      }\n      \n      // Get the session details\n      const session = await storage.getSessionWithKnowledgeAreas(sessionId);\n      if (!session) {\n        return res.status(404).json({ message: 'Session not found' });\n      }\n      \n      // Get all questions and answers for this session\n      const questionsWithAnswers = await storage.getSessionQuestionsWithAnswers(sessionId);\n      if (questionsWithAnswers.length === 0) {\n        return res.status(400).json({ message: 'No questions and answers found for this session' });\n      }\n      \n      // Filter out questions without answers\n      const completedQuestionsWithAnswers = questionsWithAnswers.filter(qa => qa.answer);\n      if (completedQuestionsWithAnswers.length === 0) {\n        return res.status(400).json({ message: 'No answered questions found for this session' });\n      }\n      \n      // Create a unique cache key based on the session ID and answers\n      // We use a hash of the answers' content to ensure uniqueness while keeping the key short\n      const answersHash = completedQuestionsWithAnswers\n        .map(qa => `${qa.id}-${qa.answer?.userAnswer.substring(0, 10)}`)\n        .join('|');\n      const cacheKey = `evaluate:${sessionId}:${answersHash.length}`;\n      \n      try {\n        const evaluationResult = await getCachedOrFetchFromAI(\n          cacheKey,\n          () => {\n            // Prepare the prompt for AI evaluation\n            let promptText = `I've completed a test on ${session.topic}. Please evaluate my overall performance based on the following questions and answers:\\n\\n`;\n            \n            completedQuestionsWithAnswers.forEach((qa: QuestionWithAnswer, index: number) => {\n              promptText += `Question ${index + 1} (${qa.difficulty}): ${qa.question}\\n`;\n              promptText += `My Answer: ${qa.answer?.userAnswer}\\n`;\n              if (qa.answer?.evaluation) {\n                const evaluation = qa.answer.evaluation as EvaluationResult;\n                promptText += `Individual Score: ${evaluation.correctness}/100\\n\\n`;\n              } else {\n                promptText += `\\n`;\n              }\n            });\n            \n            promptText += `Based on my answers above, please provide:\n            1. An overall score out of 100\n            2. General feedback on my performance (be concise)\n            3. A list of my strengths (max 3 points)\n            4. A list of areas that need improvement (max 3 points)\n            5. Recommended knowledge areas to focus on for further study (max 3 areas)\n            \n            Format your response as a JSON object with the following structure:\n            {\n              \"totalScore\": <number between 0-100>,\n              \"feedback\": \"<general feedback>\",\n              \"strengths\": [\"<strength1>\", \"<strength2>\", ...],\n              \"weaknesses\": [\"<weakness1>\", \"<weakness2>\", ...],\n              \"recommendedAreas\": [\"<area1>\", \"<area2>\", ...]\n            }`;\n            \n            return promptText;\n          },\n          (text) => {\n            try {\n              // Extract JSON from response\n              const jsonMatch = text.match(/{[\\s\\S]*}/);\n              if (!jsonMatch) {\n                throw new Error('No JSON found in AI response');\n              }\n              \n              const testResult = JSON.parse(jsonMatch[0]);\n              \n              // Create full test result with questions and answers\n              return {\n                questionsAndAnswers: completedQuestionsWithAnswers.map(qa => ({\n                  question: {\n                    id: qa.id,\n                    sessionId: qa.sessionId,\n                    question: qa.question,\n                    difficulty: qa.difficulty,\n                    createdAt: qa.createdAt\n                  },\n                  answer: qa.answer!\n                })),\n                totalScore: testResult.totalScore || 0,\n                feedback: testResult.feedback || \"Your performance was evaluated.\",\n                strengths: testResult.strengths || [],\n                weaknesses: testResult.weaknesses || [],\n                recommendedAreas: testResult.recommendedAreas || []\n              };\n            } catch (error: unknown) {\n              const errorMessage = error instanceof Error ? error.message : String(error);\n              throw new Error(`Failed to parse test evaluation: ${errorMessage}`);\n            }\n          }\n        );\n        \n        res.json(evaluationResult);\n      } catch (error) {\n        console.error('Error generating or parsing evaluation:', error);\n        \n        // Return a fallback response that won't break the UI\n        const fallbackResult: TestResult = {\n          questionsAndAnswers: completedQuestionsWithAnswers.map(qa => ({\n            question: {\n              id: qa.id,\n              sessionId: qa.sessionId,\n              question: qa.question,\n              difficulty: qa.difficulty,\n              createdAt: qa.createdAt\n            },\n            answer: qa.answer!\n          })),\n          totalScore: 50, // Midpoint score as fallback\n          feedback: \"I'm having trouble generating a detailed evaluation right now. Here's a basic assessment of your answers.\",\n          strengths: [\"Your answers show an understanding of the concepts\"],\n          weaknesses: [\"Some areas might need more clarity or detail\"],\n          recommendedAreas: [\"Review the core concepts of \" + session.topic]\n        };\n        \n        res.json(fallbackResult);\n      }\n    } catch (error) {\n      console.error('Error evaluating test:', error);\n      res.status(500).json({ message: 'Failed to evaluate test', error });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":36519},"server/storage.ts":{"content":"import { users, sessions, questions, answers, knowledgeAreas } from \"@shared/schema\";\nimport type { \n  User, InsertUser, \n  Session, InsertSession, \n  Question, InsertQuestion, \n  Answer, InsertAnswer, \n  KnowledgeArea, InsertKnowledgeArea,\n  SessionWithKnowledgeAreas,\n  QuestionWithAnswer\n} from \"@shared/schema\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Session operations\n  createSession(session: InsertSession): Promise<Session>;\n  getSession(id: number): Promise<Session | undefined>;\n  getUserSessions(userId: number): Promise<Session[]>;\n  updateSessionStage(id: number, stage: string): Promise<Session | undefined>;\n  getSessionWithKnowledgeAreas(id: number): Promise<SessionWithKnowledgeAreas | undefined>;\n  \n  // Question operations\n  createQuestion(question: InsertQuestion): Promise<Question>;\n  getSessionQuestions(sessionId: number): Promise<Question[]>;\n  getQuestion(id: number): Promise<Question | undefined>;\n  \n  // Answer operations\n  createAnswer(answer: InsertAnswer): Promise<Answer>;\n  getQuestionAnswer(questionId: number): Promise<Answer | undefined>;\n  getSessionQuestionsWithAnswers(sessionId: number): Promise<QuestionWithAnswer[]>;\n  \n  // Knowledge area operations\n  createKnowledgeArea(area: InsertKnowledgeArea): Promise<KnowledgeArea>;\n  updateKnowledgeArea(id: number, proficiency: number): Promise<KnowledgeArea | undefined>;\n  getSessionKnowledgeAreas(sessionId: number): Promise<KnowledgeArea[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  private sessions: Map<number, Session>;\n  private questions: Map<number, Question>;\n  private answers: Map<number, Answer>;\n  private knowledgeAreas: Map<number, KnowledgeArea>;\n  \n  private userId: number;\n  private sessionId: number;\n  private questionId: number;\n  private answerId: number;\n  private knowledgeAreaId: number;\n  \n  constructor() {\n    this.users = new Map();\n    this.sessions = new Map();\n    this.questions = new Map();\n    this.answers = new Map();\n    this.knowledgeAreas = new Map();\n    \n    this.userId = 1;\n    this.sessionId = 1;\n    this.questionId = 1;\n    this.answerId = 1;\n    this.knowledgeAreaId = 1;\n  }\n  \n  // User operations\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n  \n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n  \n  async createUser(user: InsertUser): Promise<User> {\n    const id = this.userId++;\n    const newUser = { ...user, id };\n    this.users.set(id, newUser);\n    return newUser;\n  }\n  \n  // Session operations\n  async createSession(session: InsertSession): Promise<Session> {\n    const id = this.sessionId++;\n    const newSession = { \n      ...session, \n      id, \n      createdAt: new Date(), \n      updatedAt: new Date() \n    };\n    this.sessions.set(id, newSession);\n    return newSession;\n  }\n  \n  async getSession(id: number): Promise<Session | undefined> {\n    return this.sessions.get(id);\n  }\n  \n  async getUserSessions(userId: number): Promise<Session[]> {\n    return Array.from(this.sessions.values()).filter(session => session.userId === userId);\n  }\n  \n  async updateSessionStage(id: number, stage: string): Promise<Session | undefined> {\n    const session = this.sessions.get(id);\n    if (!session) return undefined;\n    \n    const updatedSession = { \n      ...session, \n      stage, \n      updatedAt: new Date() \n    };\n    this.sessions.set(id, updatedSession);\n    return updatedSession;\n  }\n  \n  async getSessionWithKnowledgeAreas(id: number): Promise<SessionWithKnowledgeAreas | undefined> {\n    const session = await this.getSession(id);\n    if (!session) return undefined;\n    \n    const knowledgeAreas = await this.getSessionKnowledgeAreas(id);\n    return {\n      ...session,\n      knowledgeAreas\n    };\n  }\n  \n  // Question operations\n  async createQuestion(question: InsertQuestion): Promise<Question> {\n    const id = this.questionId++;\n    const newQuestion = { \n      ...question, \n      id,\n      createdAt: new Date() \n    };\n    this.questions.set(id, newQuestion);\n    return newQuestion;\n  }\n  \n  async getSessionQuestions(sessionId: number): Promise<Question[]> {\n    return Array.from(this.questions.values()).filter(question => question.sessionId === sessionId);\n  }\n  \n  async getQuestion(id: number): Promise<Question | undefined> {\n    return this.questions.get(id);\n  }\n  \n  // Answer operations\n  async createAnswer(answer: InsertAnswer): Promise<Answer> {\n    const id = this.answerId++;\n    \n    // For existing questions, we'll update the answer rather than creating a new one\n    const existingAnswer = await this.getQuestionAnswer(answer.questionId);\n    \n    if (existingAnswer) {\n      // Update existing answer\n      const updatedAnswer = { \n        ...existingAnswer,\n        userAnswer: answer.userAnswer,\n        evaluation: answer.evaluation,\n        // Only include batchEvaluation if it exists in the input\n        ...(answer.batchEvaluation ? { batchEvaluation: answer.batchEvaluation } : {})\n      };\n      this.answers.set(existingAnswer.id, updatedAnswer);\n      return updatedAnswer;\n    } else {\n      // Create new answer\n      const newAnswer = { \n        ...answer, \n        id,\n        createdAt: new Date() \n      };\n      this.answers.set(id, newAnswer);\n      return newAnswer;\n    }\n  }\n  \n  async getQuestionAnswer(questionId: number): Promise<Answer | undefined> {\n    return Array.from(this.answers.values()).find(answer => answer.questionId === questionId);\n  }\n  \n  async getSessionQuestionsWithAnswers(sessionId: number): Promise<QuestionWithAnswer[]> {\n    const questions = await this.getSessionQuestions(sessionId);\n    return await Promise.all(questions.map(async (question) => {\n      const answer = await this.getQuestionAnswer(question.id);\n      return {\n        ...question,\n        answer\n      };\n    }));\n  }\n  \n  // Knowledge area operations\n  async createKnowledgeArea(area: InsertKnowledgeArea): Promise<KnowledgeArea> {\n    const id = this.knowledgeAreaId++;\n    const newArea = { \n      ...area, \n      id,\n      updatedAt: new Date() \n    };\n    this.knowledgeAreas.set(id, newArea);\n    return newArea;\n  }\n  \n  async updateKnowledgeArea(id: number, proficiency: number): Promise<KnowledgeArea | undefined> {\n    const area = this.knowledgeAreas.get(id);\n    if (!area) return undefined;\n    \n    const updatedArea = { \n      ...area, \n      proficiency,\n      updatedAt: new Date() \n    };\n    this.knowledgeAreas.set(id, updatedArea);\n    return updatedArea;\n  }\n  \n  async getSessionKnowledgeAreas(sessionId: number): Promise<KnowledgeArea[]> {\n    return Array.from(this.knowledgeAreas.values()).filter(area => area.sessionId === sessionId);\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":7009},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path, { dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        __dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(__dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2374},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, json } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// User schema\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\n// Session schema\nexport const sessions = pgTable(\"sessions\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull(),\n  topic: text(\"topic\").notNull(),\n  stage: text(\"stage\").notNull(), // \"analysis\", \"feedback\", \"teaching\", \"retest\"\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const insertSessionSchema = createInsertSchema(sessions).pick({\n  userId: true,\n  topic: true,\n  stage: true,\n});\n\n// Question schema\nexport const questions = pgTable(\"questions\", {\n  id: serial(\"id\").primaryKey(),\n  sessionId: integer(\"session_id\").notNull(),\n  question: text(\"question\").notNull(),\n  difficulty: text(\"difficulty\").notNull(), // \"easy\", \"medium\", \"hard\"\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertQuestionSchema = createInsertSchema(questions).pick({\n  sessionId: true,\n  question: true,\n  difficulty: true,\n});\n\n// Answer schema\nexport const answers = pgTable(\"answers\", {\n  id: serial(\"id\").primaryKey(),\n  questionId: integer(\"question_id\").notNull(),\n  userAnswer: text(\"user_answer\").notNull(),\n  evaluation: json(\"evaluation\").notNull(), // Contains correctness, feedback, etc.\n  batchEvaluation: json(\"batch_evaluation\"), // Optional batch evaluation data\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertAnswerSchema = createInsertSchema(answers).pick({\n  questionId: true,\n  userAnswer: true,\n  evaluation: true,\n  batchEvaluation: true,\n});\n\n// KnowledgeArea schema\nexport const knowledgeAreas = pgTable(\"knowledge_areas\", {\n  id: serial(\"id\").primaryKey(),\n  sessionId: integer(\"session_id\").notNull(),\n  name: text(\"name\").notNull(),\n  proficiency: integer(\"proficiency\").notNull(), // 0-100 score\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const insertKnowledgeAreaSchema = createInsertSchema(knowledgeAreas).pick({\n  sessionId: true,\n  name: true,\n  proficiency: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Session = typeof sessions.$inferSelect;\nexport type InsertSession = z.infer<typeof insertSessionSchema>;\n\nexport type Question = typeof questions.$inferSelect;\nexport type InsertQuestion = z.infer<typeof insertQuestionSchema>;\n\nexport type Answer = typeof answers.$inferSelect;\nexport type InsertAnswer = z.infer<typeof insertAnswerSchema>;\n\nexport type KnowledgeArea = typeof knowledgeAreas.$inferSelect;\nexport type InsertKnowledgeArea = z.infer<typeof insertKnowledgeAreaSchema>;\n\n// Frontend types\nexport interface SessionWithKnowledgeAreas extends Session {\n  knowledgeAreas: KnowledgeArea[];\n}\n\nexport interface QuestionWithAnswer extends Question {\n  answer?: Answer;\n}\n\nexport interface TestResult {\n  questionsAndAnswers: {\n    question: Question;\n    answer: Answer;\n  }[];\n  totalScore: number;\n  feedback: string;\n  strengths: string[];\n  weaknesses: string[];\n  recommendedAreas: string[];\n}\n\nexport interface EvaluationResult {\n  correctness: number; // 0-100 score\n  feedback: string;\n  strengths: string[];\n  weaknesses: string[];\n}\n\nexport interface BatchEvaluationResult {\n  totalScore: number;\n  feedback: string;\n  strengths: string[];\n  weaknesses: string[];\n  recommendedAreas: string[];\n}\n\nexport interface AIResponse {\n  text: string;\n  followUpQuestions?: string[];\n}\n","size_bytes":3882},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport Analysis from \"@/pages/analysis\";\nimport Feedback from \"@/pages/feedback\";\nimport Teaching from \"@/pages/teaching\";\nimport History from \"@/pages/history\";\nimport Progress from \"@/pages/progress\";\nimport { SessionProvider } from \"./contexts/SessionContext\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/analysis\" component={Analysis} />\n      <Route path=\"/feedback\" component={Feedback} />\n      <Route path=\"/teaching\" component={Teaching} />\n      <Route path=\"/history\" component={History} />\n      <Route path=\"/progress\" component={Progress} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <SessionProvider>\n        <Router />\n        <Toaster />\n      </SessionProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1172},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":189},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(\n  <App />\n);\n","size_bytes":161},"client/src/components/Footer.tsx":{"content":"import React from \"react\";\nimport { useLocation } from \"wouter\";\n\nconst Footer: React.FC = () => {\n  const [, navigate] = useLocation();\n  \n  return (\n    <footer className=\"bg-white border-t border-neutral-200 py-4 mt-auto\">\n      <div className=\"max-w-7xl mx-auto px-4\">\n        <div className=\"flex flex-col md:flex-row justify-between items-center\">\n          <div className=\"flex items-center mb-4 md:mb-0\">\n            <span className=\"font-medium text-neutral-800\">LearnAI</span>\n            <span className=\"mx-2 text-neutral-300\">|</span>\n            <span className=\"text-sm text-neutral-500\">Powered by Gemini AI</span>\n          </div>\n          <div className=\"flex space-x-6\">\n            <button \n              onClick={() => navigate(\"/privacy\")} \n              className=\"text-sm text-neutral-600 hover:text-primary transition-colors\"\n            >\n              Privacy Policy\n            </button>\n            <button \n              onClick={() => navigate(\"/terms\")} \n              className=\"text-sm text-neutral-600 hover:text-primary transition-colors\"\n            >\n              Terms of Service\n            </button>\n            <button \n              onClick={() => navigate(\"/help\")} \n              className=\"text-sm text-neutral-600 hover:text-primary transition-colors\"\n            >\n              Help Center\n            </button>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","size_bytes":1454},"client/src/components/Header.tsx":{"content":"import React from \"react\";\nimport { Link, useLocation } from \"wouter\";\n\nconst Header: React.FC = () => {\n  const [location] = useLocation();\n\n  return (\n    <header className=\"bg-white shadow-md\">\n      <div className=\"max-w-7xl mx-auto px-4 py-4 flex justify-between items-center\">\n        <Link href=\"/\">\n          <div className=\"flex items-center cursor-pointer\">\n            <svg \n              className=\"w-8 h-8 text-primary mr-2\" \n              xmlns=\"http://www.w3.org/2000/svg\" \n              viewBox=\"0 0 24 24\" \n              fill=\"none\" \n              stroke=\"currentColor\" \n              strokeWidth=\"2\" \n              strokeLinecap=\"round\" \n              strokeLinejoin=\"round\"\n            >\n              <path d=\"M12 2a8 8 0 1 0 0 16 8 8 0 0 0 0-16z\"></path>\n              <path d=\"M12 8a1 1 0 1 0 0-2 1 1 0 0 0 0 2z\"></path>\n              <path d=\"M12 12a1 1 0 1 0 0-2 1 1 0 0 0 0 2z\"></path>\n              <path d=\"M18 12a1 1 0 1 0 0-2 1 1 0 0 0 0 2z\"></path>\n              <path d=\"M6 12a1 1 0 1 0 0-2 1 1 0 0 0 0 2z\"></path>\n              <path d=\"M14 16a1 1 0 1 0 0-2 1 1 0 0 0 0 2z\"></path>\n              <path d=\"M10 16a1 1 0 1 0 0-2 1 1 0 0 0 0 2z\"></path>\n            </svg>\n            <h1 className=\"font-semibold text-2xl text-primary-dark\">LearnAI</h1>\n          </div>\n        </Link>\n        <div className=\"flex items-center space-x-4\">\n          <Link href=\"/history\">\n            <button className=\"hidden md:flex items-center text-neutral-700 hover:text-primary-dark transition-colors\">\n              <svg \n                className=\"w-5 h-5 mr-1\" \n                xmlns=\"http://www.w3.org/2000/svg\" \n                viewBox=\"0 0 24 24\" \n                fill=\"none\" \n                stroke=\"currentColor\" \n                strokeWidth=\"2\" \n                strokeLinecap=\"round\" \n                strokeLinejoin=\"round\"\n              >\n                <path d=\"M12 8v4l3 3\"></path>\n                <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n              </svg>\n              <span>History</span>\n            </button>\n          </Link>\n          <Link href=\"/progress\">\n            <button className=\"hidden md:flex items-center text-neutral-700 hover:text-primary-dark transition-colors\">\n              <svg \n                className=\"w-5 h-5 mr-1\" \n                xmlns=\"http://www.w3.org/2000/svg\" \n                viewBox=\"0 0 24 24\" \n                fill=\"none\" \n                stroke=\"currentColor\" \n                strokeWidth=\"2\" \n                strokeLinecap=\"round\" \n                strokeLinejoin=\"round\"\n              >\n                <line x1=\"18\" y1=\"20\" x2=\"18\" y2=\"10\"></line>\n                <line x1=\"12\" y1=\"20\" x2=\"12\" y2=\"4\"></line>\n                <line x1=\"6\" y1=\"20\" x2=\"6\" y2=\"14\"></line>\n              </svg>\n              <span>Progress</span>\n            </button>\n          </Link>\n          <Link href=\"/profile\">\n            <button className=\"flex items-center text-neutral-700 hover:text-primary-dark transition-colors\">\n              <svg \n                className=\"w-5 h-5 mr-1\" \n                xmlns=\"http://www.w3.org/2000/svg\" \n                viewBox=\"0 0 24 24\" \n                fill=\"none\" \n                stroke=\"currentColor\" \n                strokeWidth=\"2\" \n                strokeLinecap=\"round\" \n                strokeLinejoin=\"round\"\n              >\n                <path d=\"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2\"></path>\n                <circle cx=\"12\" cy=\"7\" r=\"4\"></circle>\n              </svg>\n              <span className=\"hidden md:inline\">Profile</span>\n            </button>\n          </Link>\n        </div>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","size_bytes":3667},"client/src/components/SidePanel.tsx":{"content":"import React from \"react\";\nimport { KnowledgeArea } from \"@shared/schema\";\nimport { useSession } from \"@/contexts/SessionContext\";\n\ninterface SidePanelProps {\n  topic: string;\n  mode: \"analysis\" | \"feedback\" | \"teaching\" | \"retest\";\n  knowledgeAreas: KnowledgeArea[];\n  onModeChange: (mode: \"analysis\" | \"feedback\" | \"teaching\" | \"retest\") => void;\n  onGenerateNotes: () => void;\n  onGenerateQuestions: () => void;\n  onChangeTopic?: () => void;\n  activeAction?: \"notes\" | \"questions\" | null;\n}\n\nconst SidePanel: React.FC<SidePanelProps> = ({\n  topic,\n  mode,\n  knowledgeAreas,\n  onModeChange,\n  onGenerateNotes,\n  onGenerateQuestions,\n  onChangeTopic,\n  activeAction = null\n}) => {\n  // Get proficiency color based on score\n  const getProficiencyColor = (proficiency: number) => {\n    if (proficiency < 40) return \"bg-[#F44336]\"; // error\n    if (proficiency < 70) return \"bg-[#FFC107]\"; // warning\n    return \"bg-[#4CAF50]\"; // success\n  };\n\n  return (\n    <div className=\"bg-white rounded-xl shadow-md p-4\">\n      <h3 className=\"font-semibold text-lg mb-4 text-neutral-800\">Current Session</h3>\n      \n      <div className=\"mb-6\">\n        <p className=\"text-sm text-neutral-600 mb-1\">Selected Topic:</p>\n        <button \n          className=\"w-full flex items-center bg-neutral-100 rounded-lg p-2 hover:bg-neutral-200 transition-colors\"\n          onClick={onChangeTopic}\n        >\n          <svg \n            className=\"w-5 h-5 text-primary mr-2\" \n            xmlns=\"http://www.w3.org/2000/svg\" \n            viewBox=\"0 0 24 24\" \n            fill=\"none\" \n            stroke=\"currentColor\" \n            strokeWidth=\"2\" \n            strokeLinecap=\"round\" \n            strokeLinejoin=\"round\"\n          >\n            <path d=\"M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H20v20H6.5a2.5 2.5 0 0 1 0-5H20\"></path>\n          </svg>\n          <span className=\"font-medium text-left flex-1\">{topic}</span>\n          <svg \n            className=\"w-4 h-4 text-neutral-400\" \n            xmlns=\"http://www.w3.org/2000/svg\" \n            viewBox=\"0 0 24 24\" \n            fill=\"none\" \n            stroke=\"currentColor\" \n            strokeWidth=\"2\" \n            strokeLinecap=\"round\" \n            strokeLinejoin=\"round\"\n          >\n            <path d=\"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6\"></path>\n            <polyline points=\"15 3 21 3 21 9\"></polyline>\n            <line x1=\"10\" y1=\"14\" x2=\"21\" y2=\"3\"></line>\n          </svg>\n        </button>\n      </div>\n      \n      <div className=\"mb-6\">\n        <p className=\"text-sm text-neutral-600 mb-1\">Mode:</p>\n        <div className=\"grid grid-cols-2 gap-2\">\n          <button \n            className={`flex flex-col items-center justify-center p-3 rounded-lg border-2 \n              ${mode === \"analysis\" && window.location.pathname === \"/analysis\"\n                ? \"border-primary bg-blue-50\" \n                : \"border-transparent bg-neutral-100 hover:border-primary-light\"} \n              transition-colors`}\n            onClick={() => onModeChange(\"analysis\")}\n          >\n            <svg \n              className={`w-5 h-5 ${mode === \"analysis\" && window.location.pathname === \"/analysis\" ? \"text-primary\" : \"text-neutral-700\"}`} \n              xmlns=\"http://www.w3.org/2000/svg\" \n              viewBox=\"0 0 24 24\" \n              fill=\"none\" \n              stroke=\"currentColor\" \n              strokeWidth=\"2\" \n              strokeLinecap=\"round\" \n              strokeLinejoin=\"round\"\n            >\n              <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n              <path d=\"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3\"></path>\n              <line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line>\n            </svg>\n            <span className={`text-xs mt-1 ${mode === \"analysis\" && window.location.pathname === \"/analysis\" ? \"text-primary font-medium\" : \"text-neutral-700\"}`}>\n              Analysis\n            </span>\n          </button>\n          <button \n            className={`flex flex-col items-center justify-center p-3 rounded-lg border-2 \n              ${mode === \"teaching\" && window.location.pathname === \"/teaching\"\n                ? \"border-primary bg-blue-50\" \n                : \"border-transparent bg-neutral-100 hover:border-primary-light\"} \n              transition-colors`}\n            onClick={() => onModeChange(\"teaching\")}\n          >\n            <svg \n              className={`w-5 h-5 ${mode === \"teaching\" && window.location.pathname === \"/teaching\" ? \"text-primary\" : \"text-neutral-700\"}`} \n              xmlns=\"http://www.w3.org/2000/svg\" \n              viewBox=\"0 0 24 24\" \n              fill=\"none\" \n              stroke=\"currentColor\" \n              strokeWidth=\"2\" \n              strokeLinecap=\"round\" \n              strokeLinejoin=\"round\"\n            >\n              <path d=\"M22 10v6M2 10l10-5 10 5-10 5z\"></path>\n              <path d=\"M6 12v5c0 2 2 3 6 3s6-1 6-3v-5\"></path>\n            </svg>\n            <span className={`text-xs mt-1 ${mode === \"teaching\" && window.location.pathname === \"/teaching\" ? \"text-primary font-medium\" : \"text-neutral-700\"}`}>\n              Teaching\n            </span>\n          </button>\n        </div>\n      </div>\n      \n      {knowledgeAreas.length > 0 && (\n        <div className=\"mb-6\">\n          <p className=\"text-sm text-neutral-600 mb-2\">Knowledge Areas:</p>\n          <div className=\"space-y-2\">\n            {knowledgeAreas.map((area) => (\n              <div key={area.id} className=\"flex items-center justify-between text-sm\">\n                <span>{area.name}</span>\n                <div className=\"w-24 bg-neutral-200 rounded-full h-2\">\n                  <div \n                    className={`${getProficiencyColor(area.proficiency)} rounded-full h-2`} \n                    style={{ width: `${area.proficiency}%` }}\n                  ></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      \n      <div>\n        <p className=\"text-sm text-neutral-600 mb-2\">Actions:</p>\n        <div className=\"space-y-2\">\n          <button \n            className={`w-full flex items-center justify-between p-2 text-left rounded-lg border \n              ${activeAction === \"notes\" || (mode === \"teaching\" && window.location.search.includes(\"action=notes\"))\n                ? \"border-primary bg-blue-50\" \n                : \"border-neutral-200 hover:bg-neutral-50\"} \n              transition-colors`}\n            onClick={onGenerateNotes}\n          >\n            <div className=\"flex items-center\">\n              <svg \n                className={`w-5 h-5 ${activeAction === \"notes\" || (mode === \"teaching\" && window.location.search.includes(\"action=notes\")) \n                  ? \"text-primary\" \n                  : \"text-neutral-600\"} mr-2`}\n                xmlns=\"http://www.w3.org/2000/svg\" \n                viewBox=\"0 0 24 24\" \n                fill=\"none\" \n                stroke=\"currentColor\" \n                strokeWidth=\"2\" \n                strokeLinecap=\"round\" \n                strokeLinejoin=\"round\"\n              >\n                <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"></path>\n                <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"></path>\n              </svg>\n              <span className={`text-sm ${activeAction === \"notes\" || (mode === \"teaching\" && window.location.search.includes(\"action=notes\")) \n                ? \"font-medium text-primary\" \n                : \"\"}`}>Generate Notes</span>\n            </div>\n            <svg \n              className={`w-5 h-5 ${activeAction === \"notes\" || (mode === \"teaching\" && window.location.search.includes(\"action=notes\")) \n                ? \"text-primary\" \n                : \"text-neutral-400\"}`}\n              xmlns=\"http://www.w3.org/2000/svg\" \n              viewBox=\"0 0 24 24\" \n              fill=\"none\" \n              stroke=\"currentColor\" \n              strokeWidth=\"2\" \n              strokeLinecap=\"round\" \n              strokeLinejoin=\"round\"\n            >\n              <polyline points=\"9 18 15 12 9 6\"></polyline>\n            </svg>\n          </button>\n          <button \n            className=\"w-full flex items-center justify-between p-2 text-left rounded-lg border border-neutral-200 hover:bg-neutral-50 transition-colors\"\n            onClick={onGenerateQuestions}\n          >\n            <div className=\"flex items-center\">\n              <svg \n                className=\"w-5 h-5 text-neutral-600 mr-2\" \n                xmlns=\"http://www.w3.org/2000/svg\" \n                viewBox=\"0 0 24 24\" \n                fill=\"none\" \n                stroke=\"currentColor\" \n                strokeWidth=\"2\" \n                strokeLinecap=\"round\" \n                strokeLinejoin=\"round\"\n              >\n                <path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"></path>\n                <polyline points=\"14 2 14 8 20 8\"></polyline>\n                <line x1=\"16\" y1=\"13\" x2=\"8\" y2=\"13\"></line>\n                <line x1=\"16\" y1=\"17\" x2=\"8\" y2=\"17\"></line>\n                <polyline points=\"10 9 9 9 8 9\"></polyline>\n              </svg>\n              <span className=\"text-sm\">More Questions</span>\n            </div>\n            <svg \n              className=\"w-5 h-5 text-neutral-400\" \n              xmlns=\"http://www.w3.org/2000/svg\" \n              viewBox=\"0 0 24 24\" \n              fill=\"none\" \n              stroke=\"currentColor\" \n              strokeWidth=\"2\" \n              strokeLinecap=\"round\" \n              strokeLinejoin=\"round\"\n            >\n              <polyline points=\"9 18 15 12 9 6\"></polyline>\n            </svg>\n          </button>\n          <button \n            className={`w-full flex items-center justify-between p-2 text-left rounded-lg border \n              ${mode === \"teaching\" && window.location.pathname === \"/teaching\"\n                ? \"border-primary bg-blue-50\" \n                : \"border-neutral-200 hover:bg-neutral-50\"} \n              transition-colors`}\n            onClick={() => onModeChange(\"teaching\")}\n          >\n            <div className=\"flex items-center\">\n              <svg \n                className={`w-5 h-5 ${mode === \"teaching\" && window.location.pathname === \"/teaching\" ? \"text-primary\" : \"text-neutral-600\"} mr-2`} \n                xmlns=\"http://www.w3.org/2000/svg\" \n                viewBox=\"0 0 24 24\" \n                fill=\"none\" \n                stroke=\"currentColor\" \n                strokeWidth=\"2\" \n                strokeLinecap=\"round\" \n                strokeLinejoin=\"round\"\n              >\n                <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n                <path d=\"M12 18a6 6 0 0 0 0-12\"></path>\n                <circle cx=\"12\" cy=\"12\" r=\"1\"></circle>\n              </svg>\n              <span className={`text-sm ${mode === \"teaching\" && window.location.pathname === \"/teaching\" ? \"font-medium text-primary\" : \"\"}`}>\n                Teaching Mode\n              </span>\n            </div>\n            <svg \n              className={`w-5 h-5 ${mode === \"teaching\" && window.location.pathname === \"/teaching\" ? \"text-primary\" : \"text-neutral-400\"}`} \n              xmlns=\"http://www.w3.org/2000/svg\" \n              viewBox=\"0 0 24 24\" \n              fill=\"none\" \n              stroke=\"currentColor\" \n              strokeWidth=\"2\" \n              strokeLinecap=\"round\" \n              strokeLinejoin=\"round\"\n            >\n              <polyline points=\"9 18 15 12 9 6\"></polyline>\n            </svg>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SidePanel;\n","size_bytes":11467},"client/src/components/TopicSelectionModal.tsx":{"content":"import React, { useState } from \"react\";\nimport { \n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n  DialogClose\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, Plus } from \"lucide-react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\ninterface TopicCategory {\n  name: string;\n  topics: string[];\n}\n\n// Define education and difficulty levels\ntype EducationLevel = \"Class 1-5\" | \"Class 6-8\" | \"Class 9-10\" | \"Class 11-12\" | \"Bachelors\" | \"Masters\" | \"PhD\";\ntype DifficultyLevel = \"Beginner\" | \"Standard\" | \"Advanced\";\n\nconst EDUCATION_LEVELS: EducationLevel[] = [\n  \"Class 1-5\", \"Class 6-8\", \"Class 9-10\", \"Class 11-12\", \"Bachelors\", \"Masters\", \"PhD\"\n];\n\nconst DIFFICULTY_LEVELS: DifficultyLevel[] = [\n  \"Beginner\", \"Standard\", \"Advanced\"\n];\n\nconst DEFAULT_TOPICS: TopicCategory[] = [\n  {\n    name: \"Mathematics\",\n    topics: [\"Algebra\", \"Calculus\", \"Statistics\", \"Geometry\", \"Trigonometry\", \"Linear Algebra\"]\n  },\n  {\n    name: \"Physics\",\n    topics: [\"Mechanics\", \"Quantum Physics\", \"Relativity\", \"Thermodynamics\", \"Electromagnetism\"]\n  },\n  {\n    name: \"Computer Science\",\n    topics: [\"Algorithms\", \"Data Structures\", \"Machine Learning\", \"Web Development\", \"Databases\", \"Quantum Computing\"]\n  },\n  {\n    name: \"Biology\",\n    topics: [\"Genetics\", \"Evolution\", \"Anatomy\", \"Ecology\", \"Microbiology\", \"Cell Biology\"]\n  },\n  {\n    name: \"Chemistry\",\n    topics: [\"Organic Chemistry\", \"Inorganic Chemistry\", \"Biochemistry\", \"Physical Chemistry\", \"Analytical Chemistry\"]\n  },\n  {\n    name: \"Languages\",\n    topics: [\"English Grammar\", \"Spanish\", \"French\", \"German\", \"Mandarin\", \"Japanese\"]\n  }\n];\n\ninterface TopicSelectionModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onSelectTopic: (topic: string, educationLevel: EducationLevel, difficultyLevel: DifficultyLevel) => void;\n}\n\ninterface TopicMetadata {\n  topic: string;\n  educationLevel: EducationLevel;\n  difficultyLevel: DifficultyLevel;\n}\n\nconst TopicSelectionModal: React.FC<TopicSelectionModalProps> = ({\n  open,\n  onOpenChange,\n  onSelectTopic\n}) => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n  const [selectedTopic, setSelectedTopic] = useState<string | null>(null);\n  const [customTopic, setCustomTopic] = useState(\"\");\n  const [activeTab, setActiveTab] = useState<\"browse\" | \"custom\">(\"browse\");\n  const [educationLevel, setEducationLevel] = useState<EducationLevel>(\"Class 9-10\");\n  const [difficultyLevel, setDifficultyLevel] = useState<DifficultyLevel>(\"Standard\");\n  \n  // Filter topics based on search term\n  const filteredTopics = searchTerm \n    ? DEFAULT_TOPICS.map(category => ({\n        name: category.name,\n        topics: category.topics.filter(topic => \n          topic.toLowerCase().includes(searchTerm.toLowerCase())\n        )\n      })).filter(category => category.topics.length > 0)\n    : DEFAULT_TOPICS;\n  \n  const handleConfirm = () => {\n    if (activeTab === \"browse\" && selectedTopic) {\n      onSelectTopic(selectedTopic, educationLevel, difficultyLevel);\n      resetState();\n    } else if (activeTab === \"custom\" && customTopic.trim()) {\n      onSelectTopic(customTopic.trim(), educationLevel, difficultyLevel);\n      resetState();\n    }\n  };\n  \n  const resetState = () => {\n    setSelectedTopic(null);\n    setSelectedCategory(null);\n    setSearchTerm(\"\");\n    setCustomTopic(\"\");\n    onOpenChange(false);\n  };\n  \n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Select a Topic</DialogTitle>\n          <DialogDescription>\n            Choose a topic for your educational session\n          </DialogDescription>\n        </DialogHeader>\n        \n        <Tabs defaultValue=\"browse\" onValueChange={(value) => setActiveTab(value as \"browse\" | \"custom\")}>\n          <TabsList className=\"grid w-full grid-cols-2 mb-4\">\n            <TabsTrigger value=\"browse\">Browse Topics</TabsTrigger>\n            <TabsTrigger value=\"custom\">Custom Topic</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"browse\">\n            <div className=\"mb-4\">\n              <div className=\"relative\">\n                <Input\n                  placeholder=\"Search topics...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-9\"\n                />\n                <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              </div>\n            </div>\n            \n            <div className=\"h-64 overflow-y-auto mb-4\">\n              {selectedCategory ? (\n                <div>\n                  <div className=\"flex items-center mb-2\">\n                    <Button \n                      variant=\"ghost\" \n                      size=\"sm\" \n                      onClick={() => setSelectedCategory(null)}\n                      className=\"p-0 mr-2\"\n                    >\n                      <svg \n                        xmlns=\"http://www.w3.org/2000/svg\" \n                        width=\"16\" \n                        height=\"16\" \n                        viewBox=\"0 0 24 24\" \n                        fill=\"none\" \n                        stroke=\"currentColor\" \n                        strokeWidth=\"2\" \n                        strokeLinecap=\"round\" \n                        strokeLinejoin=\"round\" \n                        className=\"mr-1\"\n                      >\n                        <path d=\"m15 18-6-6 6-6\" />\n                      </svg>\n                      Back\n                    </Button>\n                    <h3 className=\"font-medium\">{selectedCategory}</h3>\n                    {selectedTopic && (\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        onClick={handleConfirm}\n                        className=\"ml-auto\"\n                      >\n                        <svg \n                          xmlns=\"http://www.w3.org/2000/svg\" \n                          width=\"16\" \n                          height=\"16\" \n                          viewBox=\"0 0 24 24\" \n                          fill=\"none\" \n                          stroke=\"currentColor\" \n                          strokeWidth=\"2\" \n                          strokeLinecap=\"round\" \n                          strokeLinejoin=\"round\" \n                          className=\"mr-1\"\n                        >\n                          <path d=\"M20 6L9 17l-5-5\" />\n                        </svg>\n                        Done\n                      </Button>\n                    )}\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 gap-2\">\n                    {filteredTopics\n                      .find(cat => cat.name === selectedCategory)\n                      ?.topics.map(topic => (\n                        <button\n                          key={topic}\n                          className={`text-left p-3 border rounded-lg hover:border-primary hover:bg-primary-50 \n                            ${selectedTopic === topic ? 'border-primary bg-primary-50' : ''}`}\n                          onClick={() => setSelectedTopic(topic)}\n                        >\n                          {topic}\n                        </button>\n                      ))}\n                  </div>\n                </div>\n              ) : (\n                <>\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <h3 className=\"font-medium\">Select a category</h3>\n                    {selectedTopic && (\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        onClick={handleConfirm}\n                        className=\"ml-auto\"\n                      >\n                        <svg \n                          xmlns=\"http://www.w3.org/2000/svg\" \n                          width=\"16\" \n                          height=\"16\" \n                          viewBox=\"0 0 24 24\" \n                          fill=\"none\" \n                          stroke=\"currentColor\" \n                          strokeWidth=\"2\" \n                          strokeLinecap=\"round\" \n                          strokeLinejoin=\"round\" \n                          className=\"mr-1\"\n                        >\n                          <path d=\"M20 6L9 17l-5-5\" />\n                        </svg>\n                        Done\n                      </Button>\n                    )}\n                  </div>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                    {filteredTopics.map(category => (\n                      <div \n                        key={category.name}\n                        className={`border rounded-lg p-3 hover:border-primary hover:bg-primary-50 cursor-pointer\n                          ${selectedTopic === category.topics[0] ? 'border-primary bg-primary-50' : ''}`}\n                        onClick={() => {\n                          setSelectedCategory(category.name);\n                          // Automatically select the first topic when clicking on a category\n                          setSelectedTopic(category.topics[0]);\n                        }}\n                      >\n                        <h4 className=\"font-medium\">{category.name}</h4>\n                        <p className=\"text-sm text-neutral-500\">\n                          {category.topics.slice(0, 3).join(\", \")}\n                          {category.topics.length > 3 ? \"...\" : \"\"}\n                        </p>\n                      </div>\n                    ))}\n                  </div>\n                </>\n              )}\n            </div>\n          </TabsContent>\n          \n          <TabsContent value=\"custom\">\n            <div className=\"mb-4\">\n              <label className=\"block text-sm font-medium mb-2\">Enter custom topic:</label>\n              <Input\n                placeholder=\"E.g., 'Nuclear Physics' or 'South American History'\"\n                value={customTopic}\n                onChange={(e) => setCustomTopic(e.target.value)}\n                className=\"mb-2\"\n              />\n              <p className=\"text-sm text-muted-foreground\">\n                Enter any subject you want to learn about. Be specific for better results.\n              </p>\n            </div>\n            \n            {customTopic.trim() && (\n              <div className=\"mb-4 p-3 border rounded-lg bg-primary-50 border-primary\">\n                <div className=\"flex items-center\">\n                  <Plus className=\"h-4 w-4 mr-2 text-primary\" />\n                  <p className=\"font-medium\">{customTopic}</p>\n                </div>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  The system will generate questions about this topic\n                </p>\n              </div>\n            )}\n          </TabsContent>\n        </Tabs>\n        \n        <div className=\"mb-4\">\n          <h3 className=\"text-sm font-medium mb-2\">Configuration Options</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"text-sm text-muted-foreground mb-1 block\">Education Level</label>\n              <Select \n                value={educationLevel} \n                onValueChange={(value) => setEducationLevel(value as EducationLevel)}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select education level\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {EDUCATION_LEVELS.map(level => (\n                    <SelectItem key={level} value={level}>\n                      {level}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <label className=\"text-sm text-muted-foreground mb-1 block\">Difficulty Level</label>\n              <Select \n                value={difficultyLevel} \n                onValueChange={(value) => setDifficultyLevel(value as DifficultyLevel)}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select difficulty\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {DIFFICULTY_LEVELS.map(level => (\n                    <SelectItem key={level} value={level}>\n                      {level}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </div>\n        \n        <DialogFooter>\n          <Button\n            variant=\"outline\"\n            onClick={resetState}\n          >\n            Cancel\n          </Button>\n          <Button \n            onClick={handleConfirm}\n            disabled={(activeTab === \"browse\" && !selectedTopic) || \n                     (activeTab === \"custom\" && !customTopic.trim())}\n            className=\"bg-primary hover:bg-primary-dark\"\n          >\n            Start Analysis\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default TopicSelectionModal;\n","size_bytes":13518},"client/src/components/WorkflowProgress.tsx":{"content":"import React from \"react\";\n\ninterface WorkflowProgressProps {\n  currentStage: \"analysis\" | \"feedback\" | \"teaching\" | \"retest\";\n  sessionTime: number;\n}\n\nconst WorkflowProgress: React.FC<WorkflowProgressProps> = ({ currentStage, sessionTime }) => {\n  const stages = [\"analysis\", \"feedback\", \"teaching\", \"retest\"];\n  const currentStageIndex = stages.indexOf(currentStage);\n  \n  // Calculate progress percentage\n  const progressPercentage = Math.min(\n    ((currentStageIndex + 1) / stages.length) * 100,\n    100\n  );\n  \n  // Format session time (seconds to MM:SS)\n  const formatTime = (seconds: number): string => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <div className=\"mb-8\">\n      <div className=\"flex items-center justify-between mb-2\">\n        <h2 className=\"font-semibold text-xl text-neutral-900\">Your Learning Path</h2>\n        <div className=\"flex items-center text-neutral-600 text-sm\">\n          <svg \n            className=\"w-5 h-5 text-[#00BFA6] mr-1\" \n            xmlns=\"http://www.w3.org/2000/svg\" \n            viewBox=\"0 0 24 24\" \n            fill=\"none\" \n            stroke=\"currentColor\" \n            strokeWidth=\"2\" \n            strokeLinecap=\"round\" \n            strokeLinejoin=\"round\"\n          >\n            <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n            <polyline points=\"12 6 12 12 16 14\"></polyline>\n          </svg>\n          <span>Session time: {formatTime(sessionTime)}</span>\n        </div>\n      </div>\n      \n      <div className=\"relative\">\n        <div className=\"overflow-hidden h-2 mb-2 text-xs flex rounded bg-neutral-200\">\n          <div \n            style={{ width: `${progressPercentage}%` }} \n            className=\"shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-[#00BFA6]\"\n          ></div>\n        </div>\n        <div className=\"flex justify-between text-xs text-neutral-500\">\n          {stages.map((stage, index) => {\n            const isCompleted = index < currentStageIndex;\n            const isCurrent = index === currentStageIndex;\n            \n            let bgColor = \"bg-neutral-300\";\n            if (isCompleted) bgColor = \"bg-[#00BFA6]\";\n            if (isCurrent) bgColor = \"bg-primary\";\n            \n            let iconName = \"\";\n            switch (stage) {\n              case \"analysis\":\n                iconName = isCompleted ? \"check\" : \"quiz\";\n                break;\n              case \"feedback\":\n                iconName = isCompleted ? \"check\" : \"assessment\";\n                break;\n              case \"teaching\":\n                iconName = isCompleted ? \"check\" : \"school\";\n                break;\n              case \"retest\":\n                iconName = \"psychology\";\n                break;\n            }\n            \n            return (\n              <div key={stage} className=\"flex flex-col items-center\">\n                <div className={`rounded-full ${bgColor} w-6 h-6 flex items-center justify-center text-white`}>\n                  <svg \n                    className=\"w-4 h-4\" \n                    xmlns=\"http://www.w3.org/2000/svg\" \n                    viewBox=\"0 0 24 24\" \n                    fill=\"none\" \n                    stroke=\"currentColor\" \n                    strokeWidth=\"2\" \n                    strokeLinecap=\"round\" \n                    strokeLinejoin=\"round\"\n                  >\n                    {iconName === \"check\" && <polyline points=\"20 6 9 17 4 12\"></polyline>}\n                    {iconName === \"quiz\" && (\n                      <>\n                        <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n                        <path d=\"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3\"></path>\n                        <line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line>\n                      </>\n                    )}\n                    {iconName === \"assessment\" && (\n                      <>\n                        <polyline points=\"9 11 12 14 22 4\"></polyline>\n                        <path d=\"M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11\"></path>\n                      </>\n                    )}\n                    {iconName === \"school\" && (\n                      <>\n                        <path d=\"M22 10v6M2 10l10-5 10 5-10 5z\"></path>\n                        <path d=\"M6 12v5c0 2 2 3 6 3s6-1 6-3v-5\"></path>\n                      </>\n                    )}\n                    {iconName === \"psychology\" && (\n                      <>\n                        <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n                        <path d=\"M12 18a6 6 0 0 0 0-12\"></path>\n                        <circle cx=\"12\" cy=\"12\" r=\"1\"></circle>\n                      </>\n                    )}\n                  </svg>\n                </div>\n                <span className={`mt-1 ${isCurrent ? \"font-medium text-primary\" : \"\"}`}>\n                  {stage.charAt(0).toUpperCase() + stage.slice(1)}\n                </span>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default WorkflowProgress;\n","size_bytes":5123},"client/src/contexts/SessionContext.tsx":{"content":"import React, { createContext, useContext, useState, useEffect, useRef, ReactNode } from \"react\";\nimport { Session, KnowledgeArea, Question, Answer } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface SessionContextType {\n  currentSession: Session | null;\n  knowledgeAreas: KnowledgeArea[];\n  questions: Question[];\n  answers: Map<number, Answer>;\n  sessionTime: number;\n  \n  // Session methods\n  createSession: (userId: number, topic: string) => Promise<Session>;\n  loadSession: (sessionId: number) => Promise<void>;\n  updateSessionStage: (stage: string) => Promise<void>;\n  \n  // Knowledge area methods\n  updateKnowledgeArea: (id: number, proficiency: number) => Promise<void>;\n  \n  // Utility methods\n  resetSession: () => void;\n  startTimer: () => void;\n  pauseTimer: () => void;\n  resetTimer: () => void;\n}\n\nconst SessionContext = createContext<SessionContextType | undefined>(undefined);\n\nexport function SessionProvider({ children }: { children: ReactNode }) {\n  const [currentSession, setCurrentSession] = useState<Session | null>(null);\n  const [knowledgeAreas, setKnowledgeAreas] = useState<KnowledgeArea[]>([]);\n  const [questions, setQuestions] = useState<Question[]>([]);\n  const [answers, setAnswers] = useState<Map<number, Answer>>(new Map());\n  const [sessionTime, setSessionTime] = useState<number>(0);\n  const [timerInterval, setTimerInterval] = useState<NodeJS.Timeout | null>(null);\n  \n  // Track whether session loading is already in progress to prevent multiple concurrent loads\n  const isLoadingSession = useRef(false);\n  \n  // Clean up timer on unmount\n  useEffect(() => {\n    return () => {\n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n    };\n  }, [timerInterval]);\n  \n  const createSession = async (userId: number, topic: string): Promise<Session> => {\n    const response = await apiRequest(\"POST\", \"/api/sessions\", {\n      userId,\n      topic,\n      stage: \"analysis\"\n    });\n    \n    const newSession = await response.json();\n    setCurrentSession(newSession);\n    return newSession;\n  };\n  \n  const loadSession = async (sessionId: number): Promise<void> => {\n    // Prevent multiple concurrent loads of the same session\n    if (isLoadingSession.current) {\n      console.log(\"Session loading already in progress, skipping duplicate request\");\n      return;\n    }\n    \n    // Set the loading flag\n    isLoadingSession.current = true;\n    \n    try {\n      // Use Promise.all to make the requests concurrently for faster loading\n      const [sessionResponse, questionsResponse] = await Promise.all([\n        // Load session with knowledge areas\n        apiRequest(\"GET\", `/api/sessions/${sessionId}`),\n        \n        // Load questions with answers\n        apiRequest(\"GET\", `/api/sessions/${sessionId}/questions-with-answers`)\n      ]);\n      \n      // Process the session data\n      const sessionData = await sessionResponse.json();\n      setCurrentSession(sessionData);\n      setKnowledgeAreas(sessionData.knowledgeAreas || []);\n      \n      // Process the questions and answers data\n      const { questionsWithAnswers } = await questionsResponse.json();\n      \n      // Extract questions and answers\n      const loadedQuestions: Question[] = [];\n      const loadedAnswers = new Map<number, Answer>();\n      \n      if (Array.isArray(questionsWithAnswers)) {\n        questionsWithAnswers.forEach((qa: any) => {\n          const { answer, ...question } = qa;\n          loadedQuestions.push(question);\n          \n          if (answer) {\n            loadedAnswers.set(question.id, answer);\n          }\n        });\n      }\n      \n      setQuestions(loadedQuestions);\n      setAnswers(loadedAnswers);\n      \n    } catch (error) {\n      console.error(\"Error loading session:\", error);\n      throw error; // Propagate the error to allow proper handling in components\n    } finally {\n      // Reset the loading flag when done, whether successful or not\n      isLoadingSession.current = false;\n    }\n  };\n  \n  const updateSessionStage = async (stage: string): Promise<void> => {\n    if (!currentSession) return;\n    \n    try {\n      const response = await apiRequest(\"PATCH\", `/api/sessions/${currentSession.id}/stage`, { stage });\n      const updatedSession = await response.json();\n      setCurrentSession(updatedSession);\n    } catch (error) {\n      console.error(\"Error updating session stage:\", error);\n    }\n  };\n  \n  const updateKnowledgeArea = async (id: number, proficiency: number): Promise<void> => {\n    try {\n      const response = await apiRequest(\"PATCH\", `/api/knowledge-areas/${id}`, { proficiency });\n      const updatedArea = await response.json();\n      \n      setKnowledgeAreas(prev => \n        prev.map(area => area.id === id ? updatedArea : area)\n      );\n    } catch (error) {\n      console.error(\"Error updating knowledge area:\", error);\n    }\n  };\n  \n  const resetSession = () => {\n    setCurrentSession(null);\n    setKnowledgeAreas([]);\n    setQuestions([]);\n    setAnswers(new Map());\n    resetTimer();\n  };\n  \n  const startTimer = () => {\n    if (timerInterval) return;\n    \n    const interval = setInterval(() => {\n      setSessionTime(prev => prev + 1);\n    }, 1000);\n    \n    setTimerInterval(interval);\n  };\n  \n  const pauseTimer = () => {\n    if (timerInterval) {\n      clearInterval(timerInterval);\n      setTimerInterval(null);\n    }\n  };\n  \n  const resetTimer = () => {\n    if (timerInterval) {\n      clearInterval(timerInterval);\n      setTimerInterval(null);\n    }\n    setSessionTime(0);\n  };\n  \n  const value = {\n    currentSession,\n    knowledgeAreas,\n    questions,\n    answers,\n    sessionTime,\n    createSession,\n    loadSession,\n    updateSessionStage,\n    updateKnowledgeArea,\n    resetSession,\n    startTimer,\n    pauseTimer,\n    resetTimer\n  };\n  \n  return (\n    <SessionContext.Provider value={value}>\n      {children}\n    </SessionContext.Provider>\n  );\n}\n\nexport function useSession() {\n  const context = useContext(SessionContext);\n  if (context === undefined) {\n    throw new Error(\"useSession must be used within a SessionProvider\");\n  }\n  return context;\n}\n","size_bytes":6089},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/gemini.ts":{"content":"import { AIResponse, TestResult } from \"@shared/schema\";\nimport { apiRequest } from \"./queryClient\";\n\nexport interface GenerateQuestionsResponse {\n  questions: {\n    id: number;\n    sessionId: number;\n    question: string;\n    difficulty: string;\n    createdAt: string;\n  }[];\n}\n\nexport interface EvaluateAnswerResponse {\n  id: number;\n  questionId: number;\n  userAnswer: string;\n  evaluation: {\n    correctness: number;\n    feedback: string;\n    strengths: string[];\n    weaknesses: string[];\n  };\n  createdAt: string;\n}\n\nexport type TestEvaluationResponse = TestResult;\n\nexport async function generateQuestions(topic: string, sessionId: number): Promise<GenerateQuestionsResponse> {\n  const response = await apiRequest('POST', '/api/questions/generate', { topic, sessionId });\n  return response.json();\n}\n\nexport async function submitAnswer(questionId: number, userAnswer: string, deferEvaluation: boolean = false): Promise<EvaluateAnswerResponse> {\n  const response = await apiRequest('POST', '/api/answers', { \n    questionId, \n    userAnswer,\n    deferEvaluation // Tell the server to defer evaluation if needed\n  });\n  \n  // If we get a 202 Accepted status, the server is processing the evaluation \n  // asynchronously and has sent back a temporary response\n  if (response.status === 202) {\n    // Return the temporary response with proper typing\n    const tempResult = await response.json();\n    return tempResult;\n  }\n  \n  return response.json();\n}\n\nexport interface BatchEvaluationResponse {\n  success: boolean;\n  message: string;\n  evaluation?: {\n    totalScore: number;\n    feedback: string;\n    strengths: string[];\n    weaknesses: string[];\n    recommendedAreas: string[];\n  }\n}\n\n// Enhanced function to submit all answers for evaluation at once - now returns the evaluation data\nexport async function submitAllAnswers(sessionId: number): Promise<BatchEvaluationResponse> {\n  try {\n    console.log(`Submitting all answers for session ${sessionId} for evaluation`);\n    \n    const response = await apiRequest('POST', `/api/sessions/${sessionId}/evaluate-all-answers`, {});\n    if (!response.ok) {\n      console.error(`API returned error status: ${response.status}`);\n      throw new Error(`API returned status: ${response.status}`);\n    }\n    \n    // Parse the evaluation results\n    const data = await response.json();\n    console.log(\"Received batch evaluation response:\", data);\n    \n    // Validate that we have the required fields before returning\n    if (!data.success) {\n      throw new Error(data.message || \"Evaluation failed with no message\");\n    }\n    \n    // Make sure we have evaluation data\n    if (!data.evaluation) {\n      throw new Error(\"Evaluation completed but no evaluation data was returned\");\n    }\n    \n    return data;\n  } catch (error) {\n    console.error(\"Error in submitAllAnswers:\", error);\n    // Let the caller handle the error through Promise rejection\n    throw error;\n  }\n}\n\nexport async function getTeachingContent(topic: string, question: string): Promise<AIResponse> {\n  try {\n    const response = await apiRequest('POST', '/api/teaching', { topic, question });\n    const data = await response.json();\n    \n    // Add error handling and validation\n    if (!data || !data.text) {\n      throw new Error('Invalid response format from teaching API');\n    }\n    \n    return data;\n  } catch (error) {\n    console.error(\"Error in getTeachingContent:\", error);\n    // Return a fallback response that won't break the UI\n    return {\n      text: \"I'm having trouble connecting to the teaching service right now. Please try again in a moment.\",\n      followUpQuestions: [\"Would you like to try a different topic?\"]\n    };\n  }\n}\n\nexport async function generateStudyNotes(topic: string, weakAreas?: string[]): Promise<{ notes: string }> {\n  try {\n    const response = await apiRequest('POST', '/api/notes/generate', { topic, weakAreas });\n    const data = await response.json();\n    \n    if (!data || !data.notes) {\n      throw new Error('Invalid response format from notes generation API');\n    }\n    \n    return data;\n  } catch (error) {\n    console.error(\"Error in generateStudyNotes:\", error);\n    // Return a fallback response\n    return {\n      notes: `Here are some study notes on ${topic}:\\n\\nI'm sorry, but I'm having trouble generating detailed study notes right now. Please try again in a moment.`\n    };\n  }\n}\n\nexport async function evaluateTest(sessionId: number): Promise<TestEvaluationResponse> {\n  try {\n    const response = await apiRequest('POST', `/api/sessions/${sessionId}/evaluate`);\n    \n    if (!response.ok) {\n      throw new Error(`API returned status: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Error in evaluateTest:\", error);\n    // Return a minimal valid TestResult structure that won't break the UI\n    return {\n      questionsAndAnswers: [],\n      totalScore: 0,\n      feedback: \"We're having trouble evaluating your test results right now. Please try again later.\",\n      strengths: [\"Your answers have been saved\"],\n      weaknesses: [\"We couldn't complete the evaluation\"],\n      recommendedAreas: [\"Try again later\"]\n    };\n  }\n}\n\nexport interface GetCorrectAnswersResponse {\n  success: boolean;\n  message: string;\n  answers: { questionId: number, correctAnswer: string }[];\n}\n\nexport async function getCorrectAnswers(sessionId: number): Promise<GetCorrectAnswersResponse> {\n  try {\n    const response = await apiRequest('GET', `/api/sessions/${sessionId}/correct-answers`);\n    \n    if (!response.ok) {\n      throw new Error(`API returned status: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(\"Error in getCorrectAnswers:\", error);\n    return {\n      success: false,\n      message: \"Failed to retrieve correct answers. Please try again later.\",\n      answers: []\n    };\n  }\n}\n","size_bytes":5918},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/analysis.tsx":{"content":"import React, { useState, useEffect, useRef } from \"react\";\nimport { useLocation, useRoute } from \"wouter\";\nimport { \n  Card, \n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardFooter\n} from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\nimport WorkflowProgress from \"@/components/WorkflowProgress\";\nimport SidePanel from \"@/components/SidePanel\";\nimport TopicSelectionModal from \"@/components/TopicSelectionModal\";\nimport { useSession } from \"@/contexts/SessionContext\";\nimport { generateQuestions, submitAnswer, submitAllAnswers } from \"@/lib/gemini\";\nimport { Question, KnowledgeArea } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Import the types needed for education and difficulty levels\ntype EducationLevel = \"Class 1-5\" | \"Class 6-8\" | \"Class 9-10\" | \"Class 11-12\" | \"Bachelors\" | \"Masters\" | \"PhD\";\ntype DifficultyLevel = \"Beginner\" | \"Standard\" | \"Advanced\";\n\nconst Analysis: React.FC = () => {\n  const [, params] = useRoute(\"/analysis\");\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const sessionId = params ? parseInt(new URLSearchParams(window.location.search).get(\"sessionId\") || \"0\") : 0;\n  \n  const { \n    currentSession, \n    loadSession, \n    knowledgeAreas, \n    questions, \n    answers,\n    sessionTime,\n    startTimer,\n    updateSessionStage,\n    createSession\n  } = useSession();\n  \n  const [isLoading, setIsLoading] = useState(false);\n  const [isGeneratingQuestions, setIsGeneratingQuestions] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState<Question | null>(null);\n  const [userAnswers, setUserAnswers] = useState<Map<number, string>>(new Map());\n  const [isEvaluating, setIsEvaluating] = useState(false);\n  \n  // Load session data\n  useEffect(() => {\n    if (sessionId) {\n      loadSession(sessionId).then(() => {\n        startTimer();\n      });\n    }\n  }, [sessionId, loadSession, startTimer]);\n  \n  // Define a ref to track if we've already generated questions\n  const initialQuestionsGenerated = React.useRef(false);\n  \n  // Define the function to generate initial questions\n  const generateInitialQuestions = async () => {\n    if (!currentSession) return;\n    \n    setIsGeneratingQuestions(true);\n    try {\n      await generateQuestions(currentSession.topic, currentSession.id);\n      await loadSession(currentSession.id);\n    } catch (error) {\n      console.error(\"Failed to generate questions:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate questions. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsGeneratingQuestions(false);\n    }\n  };\n  \n  // Generate questions if there are none - using a ref to ensure it only runs once\n  useEffect(() => {\n    if (currentSession && questions.length === 0 && !isGeneratingQuestions && !initialQuestionsGenerated.current) {\n      initialQuestionsGenerated.current = true;\n      generateInitialQuestions();\n    }\n  }, [currentSession, questions, isGeneratingQuestions]);\n  \n  // Set the first unanswered question as current\n  useEffect(() => {\n    if (questions.length > 0 && !currentQuestion) {\n      const unansweredQuestion = questions.find(q => !answers.has(q.id));\n      setCurrentQuestion(unansweredQuestion || questions[0]);\n    }\n  }, [questions, answers, currentQuestion]);\n  \n  const handleAnswerChange = (questionId: number, answer: string) => {\n    setUserAnswers(prev => {\n      const newAnswers = new Map(prev);\n      newAnswers.set(questionId, answer);\n      return newAnswers;\n    });\n  };\n  \n  // Pre-fetch the next question for faster transitions\n  const [nextQuestion, setNextQuestion] = useState<Question | null>(null);\n  \n  // Find and prepare the next question in advance\n  useEffect(() => {\n    if (questions.length > 0 && currentQuestion) {\n      // Sort questions by ID for consistent ordering\n      const sortedQuestions = [...questions].sort((a, b) => a.id - b.id);\n      const currentIndex = sortedQuestions.findIndex(q => q.id === currentQuestion.id);\n      const unansweredQuestions = sortedQuestions.filter(q => !answers.has(q.id) && q.id !== currentQuestion.id);\n      \n      if (unansweredQuestions.length > 0) {\n        // Prioritize the next sequential question if it's unanswered\n        const nextSequentialQuestion = currentIndex < sortedQuestions.length - 1 ? sortedQuestions[currentIndex + 1] : null;\n        if (nextSequentialQuestion && !answers.has(nextSequentialQuestion.id)) {\n          setNextQuestion(nextSequentialQuestion);\n        } else {\n          // Otherwise use any unanswered question (already sorted)\n          setNextQuestion(unansweredQuestions[0]);\n        }\n      } else {\n        setNextQuestion(null);\n      }\n    }\n  }, [questions, currentQuestion, answers]);\n\n  const [testComplete, setTestComplete] = useState(false);\n  \n  // Topic selection modal state\n  const [isTopicModalOpen, setIsTopicModalOpen] = useState(false);\n  \n  // Store answers temporarily in local state\n  const [pendingAnswers, setPendingAnswers] = useState<Map<number, string>>(new Map());\n  \n  const handleSubmitAnswer = async () => {\n    if (!currentQuestion) return;\n    \n    const answer = userAnswers.get(currentQuestion.id);\n    if (!answer) {\n      toast({\n        title: \"Warning\",\n        description: \"Please provide an answer before submitting.\",\n        variant: \"default\",\n      });\n      return;\n    }\n    \n    setIsEvaluating(true);\n    \n    try {\n      // Just store the answer locally, don't send to server yet\n      setPendingAnswers(prev => {\n        const newPending = new Map(prev);\n        newPending.set(currentQuestion.id, answer);\n        return newPending;\n      });\n      \n      // If we have a pre-fetched next question, immediately show it\n      // This makes the UI feel more responsive\n      if (nextQuestion) {\n        setCurrentQuestion(nextQuestion);\n        setNextQuestion(null);\n      }\n      \n      // Check if all questions are answered locally\n      const allQuestionsAnswered = questions.every(q => \n        userAnswers.has(q.id)\n      );\n      \n      // Sort questions by ID for consistent ordering\n      const sortedQuestions = [...questions].sort((a, b) => a.id - b.id);\n      const isLastQuestion = currentQuestion.id === sortedQuestions[sortedQuestions.length - 1].id;\n      \n      if (allQuestionsAnswered || (nextQuestion === null && isLastQuestion)) {\n        // Show a message that we're submitting all answers\n        toast({\n          title: \"Test Complete!\",\n          description: \"Submitting and evaluating all your answers...\",\n          duration: 3000,\n        });\n        \n        setTestComplete(true);\n        \n        // Submit all answers to the server\n        const answerSubmissionPromises = Array.from(pendingAnswers.entries()).map(([questionId, userAnswer]) => \n          submitAnswer(questionId, userAnswer, true)\n        );\n        \n        // Wait for all submissions to complete\n        await Promise.all(answerSubmissionPromises);\n        \n        try {\n          // Show loading message\n          toast({\n            title: \"Evaluating answers...\",\n            description: \"Please wait while we process your answers\",\n            duration: 3000,\n          });\n          \n          // Now evaluate all answers at once and get evaluation summary\n          const result = await submitAllAnswers(sessionId);\n          \n          if (!result.success) {\n            throw new Error(\"Failed to evaluate answers: \" + result.message);\n          }\n          \n          // Show a summary of the evaluation (from the batch evaluation)\n          if (result.evaluation) {\n            toast({\n              title: `Test Evaluation Complete: ${result.evaluation.totalScore}%`,\n              description: result.evaluation.feedback.substring(0, 100) + \"...\",\n              duration: 5000,\n            });\n            \n            // TODO: Store evaluation summary for feedback page\n            // This would normally be saved in the session context\n          }\n          \n          // Refresh session data\n          await loadSession(sessionId);\n          \n          // Create knowledge areas based on question topics if not already existing\n          if (knowledgeAreas.length === 0) {\n            const topics = new Set<string>();\n            questions.forEach(q => {\n              // Extract topic from question (this is a simple approach - in a real app we might use NLP)\n              const questionText = q.question.toLowerCase();\n              \n              // Try to extract topic from question based on keywords\n              const possibleTopics = [\n                \"algebra\", \"calculus\", \"statistics\", \n                \"quantum\", \"physics\", \"mechanics\", \"newton\", \"motion\",\n                \"algorithms\", \"data structures\", \"machine learning\"\n              ];\n              \n              for (const topic of possibleTopics) {\n                if (questionText.includes(topic)) {\n                  topics.add(topic.charAt(0).toUpperCase() + topic.slice(1));\n                  break;\n                }\n              }\n            });\n            \n            // If no specific topics found, use a generic one\n            if (topics.size === 0 && currentSession) {\n              topics.add(currentSession.topic);\n            }\n            \n            // Create knowledge areas\n            const createAreaPromises = Array.from(topics).map(topic => \n              apiRequest(\"POST\", \"/api/knowledge-areas\", {\n                sessionId,\n                name: topic,\n                proficiency: Math.floor(Math.random() * 100) + 1 // Mock for demo, would be calculated based on answer correctness\n              }).catch(error => console.error(`Failed to create knowledge area for ${topic}:`, error))\n            );\n            \n            // Wait for all knowledge areas to be created\n            await Promise.allSettled(createAreaPromises);\n          }\n          \n          // Success notification\n          toast({\n            title: \"Evaluation complete!\",\n            description: \"Redirecting to your feedback page...\",\n            duration: 2000,\n          });\n          \n          // Update session stage and redirect to feedback\n          await updateSessionStage(\"feedback\");\n          setTimeout(() => {\n            navigate(`/feedback?sessionId=${sessionId}`);\n          }, 1000);\n        } catch (error) {\n          console.error(\"Error evaluating answers:\", error);\n          toast({\n            title: \"Evaluation failed\",\n            description: \"Please try again or contact support\",\n            variant: \"destructive\",\n            duration: 5000,\n          });\n        }\n      } else if (!nextQuestion) {\n        // Only if we didn't already set the next question, find one now in sorted order\n        const sortedQuestions = [...questions].sort((a, b) => a.id - b.id);\n        const nextUnansweredQuestion = sortedQuestions.find(q => !userAnswers.has(q.id));\n        if (nextUnansweredQuestion) {\n          setCurrentQuestion(nextUnansweredQuestion);\n        }\n      }\n    } catch (error) {\n      console.error(\"Failed to submit answer:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit answer. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsEvaluating(false);\n    }\n  };\n  \n  const handleModeChange = async (mode: \"analysis\" | \"feedback\" | \"teaching\" | \"retest\") => {\n    if (mode === \"teaching\") {\n      await updateSessionStage(\"teaching\");\n      navigate(`/teaching?sessionId=${sessionId}`);\n    }\n  };\n  \n  const handleGenerateNotes = () => {\n    // Navigate to teaching mode where notes can be generated\n    navigate(`/teaching?sessionId=${sessionId}&action=notes`);\n  };\n  \n  const handleGenerateQuestions = () => {\n    // Generate more questions for the same topic\n    generateInitialQuestions();\n  };\n  \n  const handleChangeTopic = () => {\n    // Open the topic selection modal\n    setIsTopicModalOpen(true);\n  };\n  \n  const handleSelectTopic = async (topic: string, educationLevel: EducationLevel, difficultyLevel: DifficultyLevel) => {\n    try {\n      // Reset state\n      setUserAnswers(new Map());\n      setPendingAnswers(new Map());\n      setCurrentQuestion(null);\n      setNextQuestion(null);\n      initialQuestionsGenerated.current = false;\n      \n      // For this demo, we'll use a fixed user ID of 1\n      const userId = 1;\n      \n      // Create the session with the topic, education level, and difficulty level\n      // Format: \"TOPIC [Education: LEVEL, Difficulty: LEVEL]\"\n      const formattedTopic = `${topic} [Education: ${educationLevel}, Difficulty: ${difficultyLevel}]`;\n      \n      const session = await createSession(userId, formattedTopic);\n      \n      // Redirect to the new session\n      window.location.href = `/analysis?sessionId=${session.id}`;\n    } catch (error) {\n      console.error(\"Failed to create session with new topic:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to change topic. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n  \n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty.toLowerCase()) {\n      case 'easy': return 'text-[#4CAF50]';\n      case 'medium': return 'text-[#FFC107]';\n      case 'hard': return 'text-[#F44336]';\n      default: return 'text-neutral-700';\n    }\n  };\n  \n  if (!currentSession) {\n    return (\n      <div className=\"flex flex-col min-h-screen\">\n        <Header />\n        <main className=\"flex-grow px-4 py-6\">\n          <div className=\"max-w-7xl mx-auto\">\n            <div className=\"flex justify-center items-center h-[60vh]\">\n              <Card className=\"w-full max-w-md\">\n                <CardContent className=\"pt-6\">\n                  <div className=\"space-y-4\">\n                    <Skeleton className=\"h-8 w-full\" />\n                    <Skeleton className=\"h-4 w-3/4\" />\n                    <Skeleton className=\"h-24 w-full\" />\n                    <Skeleton className=\"h-10 w-full\" />\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"flex flex-col min-h-screen\">\n      <Header />\n      \n      <main className=\"flex-grow px-4 py-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          <WorkflowProgress \n            currentStage=\"analysis\" \n            sessionTime={sessionTime}\n          />\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n            <div className=\"lg:col-span-1\">\n              <SidePanel \n                topic={currentSession.topic}\n                mode=\"analysis\"\n                knowledgeAreas={knowledgeAreas}\n                onModeChange={handleModeChange}\n                onGenerateNotes={handleGenerateNotes}\n                onGenerateQuestions={handleGenerateQuestions}\n                onChangeTopic={handleChangeTopic}\n              />\n            </div>\n            \n            <div className=\"lg:col-span-3\">\n              <Card className=\"shadow-md\">\n                <CardHeader>\n                  <CardTitle>Self-Analysis: Test Your Knowledge</CardTitle>\n                  <CardDescription>\n                    Answer the questions below to assess your understanding of {currentSession.topic}\n                  </CardDescription>\n                </CardHeader>\n                \n                <CardContent>\n                  {isGeneratingQuestions ? (\n                    <div className=\"space-y-4\">\n                      <Skeleton className=\"h-6 w-3/4\" />\n                      <Skeleton className=\"h-24 w-full\" />\n                      <div className=\"flex justify-end\">\n                        <Skeleton className=\"h-10 w-24\" />\n                      </div>\n                    </div>\n                  ) : currentQuestion ? (\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <h3 className=\"text-lg font-medium\">Question {\n                          [...questions].sort((a, b) => a.id - b.id).findIndex(q => q.id === currentQuestion.id) + 1\n                        } of {questions.length}</h3>\n                        <span className={`text-sm font-medium ${getDifficultyColor(currentQuestion.difficulty)}`}>\n                          {currentQuestion.difficulty.charAt(0).toUpperCase() + currentQuestion.difficulty.slice(1)}\n                        </span>\n                      </div>\n                      \n                      <div className=\"p-4 bg-neutral-50 rounded-md\">\n                        <p className=\"text-neutral-800\">{currentQuestion.question}</p>\n                      </div>\n                      \n                      <div>\n                        <label className=\"block text-sm font-medium mb-2\">Your Answer:</label>\n                        <Textarea \n                          placeholder=\"Type your answer here...\"\n                          value={userAnswers.get(currentQuestion.id) || \"\"}\n                          onChange={(e) => handleAnswerChange(currentQuestion.id, e.target.value)}\n                          rows={6}\n                          disabled={isEvaluating}\n                        />\n                      </div>\n                      \n                      <div className=\"flex justify-end\">\n                        <Button \n                          className=\"bg-primary hover:bg-primary-dark\"\n                          onClick={handleSubmitAnswer}\n                          disabled={isEvaluating}\n                        >\n                          {isEvaluating ? (\n                            <>\n                              <svg \n                                className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" \n                                xmlns=\"http://www.w3.org/2000/svg\" \n                                fill=\"none\" \n                                viewBox=\"0 0 24 24\"\n                              >\n                                <circle \n                                  className=\"opacity-25\" \n                                  cx=\"12\" \n                                  cy=\"12\" \n                                  r=\"10\" \n                                  stroke=\"currentColor\" \n                                  strokeWidth=\"4\"\n                                ></circle>\n                                <path \n                                  className=\"opacity-75\" \n                                  fill=\"currentColor\" \n                                  d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n                                ></path>\n                              </svg>\n                              Evaluating...\n                            </>\n                          ) : \"Submit Answer\"}\n                        </Button>\n                      </div>\n                      \n                      <div className=\"text-sm text-neutral-500 mt-2\">\n                        <p>Question Progress: {questions.filter(q => answers.has(q.id) || userAnswers.has(q.id)).length} of {questions.length} completed</p>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <p className=\"text-neutral-600\">No questions available. Please try generating questions.</p>\n                      <Button \n                        className=\"mt-4 bg-primary hover:bg-primary-dark\"\n                        onClick={generateInitialQuestions}\n                      >\n                        Generate Questions\n                      </Button>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </main>\n      \n      <Footer />\n      \n      {/* Topic Selection Modal */}\n      <TopicSelectionModal\n        open={isTopicModalOpen}\n        onOpenChange={setIsTopicModalOpen}\n        onSelectTopic={handleSelectTopic}\n      />\n    </div>\n  );\n};\n\nexport default Analysis;\n","size_bytes":20415},"client/src/pages/feedback.tsx":{"content":"import React, { useEffect, useState } from \"react\";\nimport { useLocation, useRoute } from \"wouter\";\nimport { \n  Card, \n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardFooter\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\nimport WorkflowProgress from \"@/components/WorkflowProgress\";\nimport SidePanel from \"@/components/SidePanel\";\nimport { useSession } from \"@/contexts/SessionContext\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { evaluateTest, submitAllAnswers, getCorrectAnswers } from \"@/lib/gemini\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { BatchEvaluationResult } from \"@/../../shared/schema\";\n\nconst Feedback: React.FC = () => {\n  const [, params] = useRoute(\"/feedback\");\n  const [, navigate] = useLocation();\n  const sessionId = params ? parseInt(new URLSearchParams(window.location.search).get(\"sessionId\") || \"0\") : 0;\n  \n  const { \n    currentSession, \n    loadSession, \n    knowledgeAreas, \n    questions, \n    answers,\n    sessionTime,\n    updateSessionStage\n  } = useSession();\n  const { toast } = useToast();\n  \n  const [answeredQuestions, setAnsweredQuestions] = useState<any[]>([]);\n  const [overallScore, setOverallScore] = useState<number>(0);\n  const [isEvaluating, setIsEvaluating] = useState(false);\n  const [isGettingAnswers, setIsGettingAnswers] = useState(false);\n  const [correctAnswers, setCorrectAnswers] = useState<Map<number, string>>(new Map());\n  const [showCorrectAnswers, setShowCorrectAnswers] = useState(false);\n  const [strengthsAndWeaknesses, setStrengthsAndWeaknesses] = useState<{\n    strengths: string[];\n    weaknesses: string[];\n    recommendedAreas?: string[];\n  }>({\n    strengths: [],\n    weaknesses: [],\n    recommendedAreas: []\n  });\n  \n  // Load session data\n  useEffect(() => {\n    if (sessionId) {\n      loadSession(sessionId);\n    }\n  }, [sessionId, loadSession]);\n  \n  // Process answered questions\n  useEffect(() => {\n    if (questions.length > 0 && answers.size > 0) {\n      const answered = questions\n        .filter(q => answers.has(q.id))\n        .map(q => ({\n          ...q,\n          answer: answers.get(q.id)\n        }));\n      \n      setAnsweredQuestions(answered);\n      \n      // Check if any answer has a 'batchEvaluation' property, which would indicate\n      // that we have received a batch evaluation from the server\n      let hasBatchEvaluation = false;\n      \n      // Convert entries to array first to avoid TypeScript downlevelIteration issue\n      const answerEntries = Array.from(answers.entries());\n      for (let i = 0; i < answerEntries.length; i++) {\n        const [, answer] = answerEntries[i];\n        // Need to check if batchEvaluation exists in the answer object\n        if (answer && typeof answer === 'object' && 'batchEvaluation' in answer && answer.batchEvaluation) {\n          hasBatchEvaluation = true;\n          const batchEval = answer.batchEvaluation as BatchEvaluationResult;\n          \n          console.log(\"Found batch evaluation:\", batchEval);\n          \n          // Use the batch evaluation instead of calculating\n          setOverallScore(batchEval.totalScore);\n          setStrengthsAndWeaknesses({\n            strengths: batchEval.strengths || [],\n            weaknesses: batchEval.weaknesses || [],\n            recommendedAreas: batchEval.recommendedAreas || []\n          });\n          break;\n        }\n      }\n      \n      // Only calculate from individual answers if no batch evaluation is available\n      if (!hasBatchEvaluation) {\n        console.log(\"No batch evaluation found, calculating from individual answers\");\n        \n        // Calculate overall score\n        let totalCorrectness = 0;\n        const allStrengths: string[] = [];\n        const allWeaknesses: string[] = [];\n        \n        answered.forEach(q => {\n          const answer = answers.get(q.id);\n          if (answer && typeof answer.evaluation === 'object' && answer.evaluation) {\n            const evaluation = answer.evaluation as { \n              correctness: number; \n              feedback: string;\n              strengths?: string[];\n              weaknesses?: string[];\n            };\n            \n            totalCorrectness += evaluation.correctness;\n            \n            // Collect strengths and weaknesses\n            if (evaluation.strengths && Array.isArray(evaluation.strengths)) {\n              allStrengths.push(...evaluation.strengths);\n            }\n            if (evaluation.weaknesses && Array.isArray(evaluation.weaknesses)) {\n              allWeaknesses.push(...evaluation.weaknesses);\n            }\n          }\n        });\n        \n        const avgScore = answered.length > 0 ? totalCorrectness / answered.length : 0;\n        setOverallScore(Math.round(avgScore));\n        \n        // Deduplicate strengths and weaknesses\n        const uniqueStrengths = Array.from(new Set(allStrengths));\n        const uniqueWeaknesses = Array.from(new Set(allWeaknesses));\n        \n        setStrengthsAndWeaknesses({\n          strengths: uniqueStrengths.slice(0, 5), // Limit to top 5\n          weaknesses: uniqueWeaknesses.slice(0, 5) // Limit to top 5\n        });\n      }\n    }\n  }, [questions, answers]);\n  \n  const handleModeChange = async (mode: \"analysis\" | \"feedback\" | \"teaching\" | \"retest\") => {\n    if (mode === \"teaching\") {\n      await updateSessionStage(\"teaching\");\n      navigate(`/teaching?sessionId=${sessionId}`);\n    } else if (mode === \"analysis\") {\n      navigate(`/analysis?sessionId=${sessionId}`);\n    }\n  };\n  \n  const handleGenerateNotes = () => {\n    navigate(`/teaching?sessionId=${sessionId}&action=notes`);\n  };\n  \n  const handleGenerateQuestions = () => {\n    navigate(`/analysis?sessionId=${sessionId}`);\n  };\n  \n  const handleBatchEvaluation = async () => {\n    if (!sessionId || isEvaluating) return;\n    \n    setIsEvaluating(true);\n    toast({\n      title: \"Submitting all answers for evaluation...\",\n      description: \"Please wait while our AI analyzes your answers.\",\n      duration: 3000,\n    });\n    \n    try {\n      // Using the submitAllAnswers function from gemini.ts\n      const response = await submitAllAnswers(sessionId);\n      \n      if (response.success && response.evaluation) {\n        // Update the score and feedback with the batch evaluation\n        setOverallScore(response.evaluation.totalScore);\n        setStrengthsAndWeaknesses({\n          strengths: response.evaluation.strengths || [],\n          weaknesses: response.evaluation.weaknesses || [],\n          recommendedAreas: response.evaluation.recommendedAreas || []\n        });\n        \n        toast({\n          title: \"Batch evaluation complete!\",\n          description: \"Your answers have been analyzed by our AI.\",\n          duration: 2000,\n        });\n        \n        // Reload the session to get the updated answers with batch evaluation\n        await loadSession(sessionId);\n      } else {\n        throw new Error(response.message || \"Batch evaluation failed\");\n      }\n    } catch (error) {\n      console.error(\"Failed to get batch evaluation:\", error);\n      toast({\n        title: \"Batch evaluation failed\",\n        description: \"We couldn't complete the batch evaluation. Please try again.\",\n        variant: \"destructive\",\n        duration: 5000,\n      });\n    } finally {\n      setIsEvaluating(false);\n    }\n  };\n  \n  // Function to save session data to localStorage\n  const saveSessionToLocalStorage = (\n    topic: string, \n    score: number, \n    strengths: string[], \n    weaknesses: string[]\n  ) => {\n    try {\n      // Save session data\n      const now = new Date().toISOString();\n      const sessionData = {\n        id: sessionId,\n        topic,\n        date: now,\n        score,\n        weaknesses\n      };\n      \n      // Get existing sessions or initialize empty array\n      const savedSessions = localStorage.getItem('eduSessions');\n      let sessions = savedSessions ? JSON.parse(savedSessions) : [];\n      \n      // Add new session (or update if exists)\n      const existingIndex = sessions.findIndex((s: any) => s.id === sessionId);\n      if (existingIndex >= 0) {\n        sessions[existingIndex] = sessionData;\n      } else {\n        sessions.push(sessionData);\n      }\n      \n      // Save back to localStorage\n      localStorage.setItem('eduSessions', JSON.stringify(sessions));\n      \n      // Save weakness data\n      if (weaknesses && weaknesses.length > 0) {\n        const savedWeaknesses = localStorage.getItem('eduWeaknesses');\n        let weaknessData = savedWeaknesses ? JSON.parse(savedWeaknesses) : [];\n        \n        // Add each weakness\n        weaknesses.forEach(weakness => {\n          const existingIndex = weaknessData.findIndex(\n            (w: any) => w.area === weakness && w.topic === currentSession?.topic\n          );\n          \n          if (existingIndex >= 0) {\n            // Update existing weakness\n            weaknessData[existingIndex].count += 1;\n            weaknessData[existingIndex].lastSeen = now;\n          } else {\n            // Add new weakness\n            weaknessData.push({\n              topic: currentSession?.topic || \"Unknown\",\n              area: weakness,\n              count: 1,\n              lastSeen: now\n            });\n          }\n        });\n        \n        // Save back to localStorage\n        localStorage.setItem('eduWeaknesses', JSON.stringify(weaknessData));\n      }\n      \n      // Save strength data\n      if (strengths && strengths.length > 0) {\n        const savedStrengths = localStorage.getItem('eduStrengths');\n        let strengthData = savedStrengths ? JSON.parse(savedStrengths) : [];\n        \n        // Add each strength\n        strengths.forEach(strength => {\n          const existingIndex = strengthData.findIndex(\n            (s: any) => s.area === strength && s.topic === currentSession?.topic\n          );\n          \n          if (existingIndex >= 0) {\n            // Update existing strength\n            strengthData[existingIndex].count += 1;\n            strengthData[existingIndex].lastSeen = now;\n          } else {\n            // Add new strength\n            strengthData.push({\n              topic: currentSession?.topic || \"Unknown\",\n              area: strength,\n              count: 1,\n              lastSeen: now\n            });\n          }\n        });\n        \n        // Save back to localStorage\n        localStorage.setItem('eduStrengths', JSON.stringify(strengthData));\n      }\n    } catch (e) {\n      console.error(\"Error saving to localStorage:\", e);\n    }\n  };\n\n  // Simplified AI evaluation that just focuses on strengths, weaknesses and overall score\n  const handleGetAIEvaluation = async () => {\n    if (!sessionId || isEvaluating) return;\n    \n    setIsEvaluating(true);\n    toast({\n      title: \"Evaluating your test...\",\n      description: \"Please wait while our AI analyzes your answers.\",\n      duration: 3000,\n    });\n    \n    try {\n      // Use the batch evaluation endpoint instead since it's more reliable\n      const response = await submitAllAnswers(sessionId);\n      \n      if (response.success && response.evaluation) {\n        // Update the score and feedback with the batch evaluation\n        setOverallScore(response.evaluation.totalScore);\n        setStrengthsAndWeaknesses({\n          strengths: response.evaluation.strengths || [],\n          weaknesses: response.evaluation.weaknesses || [],\n          recommendedAreas: response.evaluation.recommendedAreas || []\n        });\n        \n        // Save to localStorage\n        if (currentSession) {\n          saveSessionToLocalStorage(\n            currentSession.topic,\n            response.evaluation.totalScore,\n            response.evaluation.strengths || [],\n            response.evaluation.weaknesses || []\n          );\n        }\n        \n        toast({\n          title: \"Evaluation complete!\",\n          description: \"Your test has been analyzed by our AI.\",\n          duration: 2000,\n        });\n        \n        // Reload the session to get the updated answers with batch evaluation\n        await loadSession(sessionId);\n      } else {\n        throw new Error(response.message || \"Evaluation failed\");\n      }\n    } catch (error) {\n      console.error(\"Failed to get AI evaluation:\", error);\n      toast({\n        title: \"Evaluation failed\",\n        description: \"We couldn't complete the AI evaluation. Please try again.\",\n        variant: \"destructive\",\n        duration: 5000,\n      });\n    } finally {\n      setIsEvaluating(false);\n    }\n  };\n  \n  const handleGetCorrectAnswers = async () => {\n    if (!sessionId || isGettingAnswers) return;\n    \n    setIsGettingAnswers(true);\n    toast({\n      title: \"Getting correct answers...\",\n      description: \"Please wait while our AI generates the correct answers.\",\n      duration: 3000,\n    });\n    \n    try {\n      const response = await getCorrectAnswers(sessionId);\n      \n      if (response.success && response.answers.length > 0) {\n        // Create a map of question IDs to correct answers\n        const answersMap = new Map<number, string>();\n        response.answers.forEach(item => {\n          answersMap.set(item.questionId, item.correctAnswer);\n        });\n        \n        setCorrectAnswers(answersMap);\n        setShowCorrectAnswers(true);\n        \n        toast({\n          title: \"Correct answers ready!\",\n          description: \"The correct answers have been generated by our AI.\",\n          duration: 2000,\n        });\n      } else {\n        throw new Error(response.message || \"Failed to get correct answers\");\n      }\n    } catch (error) {\n      console.error(\"Failed to get correct answers:\", error);\n      toast({\n        title: \"Failed to get correct answers\",\n        description: \"We couldn't generate the correct answers. Please try again.\",\n        variant: \"destructive\",\n        duration: 5000,\n      });\n    } finally {\n      setIsGettingAnswers(false);\n    }\n  };\n  \n  const getScoreColor = (score: number) => {\n    if (score < 40) return \"text-[#F44336]\";\n    if (score < 70) return \"text-[#FFC107]\";\n    return \"text-[#4CAF50]\";\n  };\n  \n  const getScoreBackground = (score: number) => {\n    if (score < 40) return \"bg-[#F44336]\";\n    if (score < 70) return \"bg-[#FFC107]\";\n    return \"bg-[#4CAF50]\";\n  };\n  \n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty.toLowerCase()) {\n      case 'easy': return 'text-[#4CAF50]';\n      case 'medium': return 'text-[#FFC107]';\n      case 'hard': return 'text-[#F44336]';\n      default: return 'text-neutral-700';\n    }\n  };\n  \n  if (!currentSession) {\n    return (\n      <div className=\"flex flex-col min-h-screen\">\n        <Header />\n        <main className=\"flex-grow px-4 py-6\">\n          <div className=\"max-w-7xl mx-auto\">\n            <div className=\"flex justify-center items-center h-[60vh]\">\n              <Card className=\"w-full max-w-md\">\n                <CardContent className=\"pt-6\">\n                  <div className=\"space-y-4\">\n                    <Skeleton className=\"h-8 w-full\" />\n                    <Skeleton className=\"h-4 w-3/4\" />\n                    <Skeleton className=\"h-24 w-full\" />\n                    <Skeleton className=\"h-10 w-full\" />\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"flex flex-col min-h-screen\">\n      <Header />\n      \n      <main className=\"flex-grow px-4 py-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          <WorkflowProgress \n            currentStage=\"feedback\" \n            sessionTime={sessionTime}\n          />\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n            <div className=\"lg:col-span-1\">\n              <SidePanel \n                topic={currentSession.topic}\n                mode=\"feedback\"\n                knowledgeAreas={knowledgeAreas}\n                onModeChange={handleModeChange}\n                onGenerateNotes={handleGenerateNotes}\n                onGenerateQuestions={handleGenerateQuestions}\n              />\n            </div>\n            \n            <div className=\"lg:col-span-3\">\n              <Card className=\"shadow-md mb-6\">\n                <CardHeader>\n                  <CardTitle>Knowledge Assessment Results</CardTitle>\n                  <CardDescription>\n                    Your performance on {currentSession.topic}\n                  </CardDescription>\n                </CardHeader>\n                \n                <CardContent className=\"space-y-6\">\n                  <div className=\"text-center p-4 border rounded-lg\">\n                    <h3 className=\"text-lg font-medium mb-2\">Overall Score</h3>\n                    <div className=\"flex items-center justify-center\">\n                      <div className={`w-24 h-24 rounded-full flex items-center justify-center ${getScoreBackground(overallScore)} bg-opacity-10 border-4 ${getScoreBackground(overallScore)} border-opacity-50`}>\n                        <span className={`text-2xl font-bold ${getScoreColor(overallScore)}`}>{overallScore}%</span>\n                      </div>\n                    </div>\n                    <div className=\"flex flex-col sm:flex-row gap-2 justify-center mt-4\">\n                      <Button\n                        onClick={handleBatchEvaluation}\n                        disabled={isEvaluating || isGettingAnswers}\n                        variant=\"outline\"\n                        className=\"flex-1\"\n                      >\n                        {isEvaluating ? \"Processing...\" : \"Submit All Answers\"}\n                      </Button>\n                      <Button\n                        onClick={handleGetAIEvaluation}\n                        disabled={isEvaluating || isGettingAnswers}\n                        variant=\"outline\"\n                        className=\"flex-1\"\n                      >\n                        {isEvaluating ? \"Evaluating...\" : \"Evaluate Full Test\"}\n                      </Button>\n                    </div>\n                    <div className=\"mt-4\">\n                      <Button\n                        onClick={handleGetCorrectAnswers}\n                        disabled={isEvaluating || isGettingAnswers}\n                        variant=\"secondary\"\n                        className=\"w-full\"\n                      >\n                        {isGettingAnswers ? \"Generating...\" : \"Get Correct Answers\"}\n                      </Button>\n                    </div>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"border rounded-lg p-4\">\n                      <h3 className=\"text-lg font-medium mb-3\">Strengths</h3>\n                      {strengthsAndWeaknesses.strengths.length > 0 ? (\n                        <ul className=\"space-y-2\">\n                          {strengthsAndWeaknesses.strengths.map((strength, index) => (\n                            <li key={index} className=\"flex items-start\">\n                              <svg \n                                className=\"w-5 h-5 text-[#4CAF50] mr-2 flex-shrink-0 mt-0.5\" \n                                xmlns=\"http://www.w3.org/2000/svg\" \n                                viewBox=\"0 0 24 24\" \n                                fill=\"none\" \n                                stroke=\"currentColor\" \n                                strokeWidth=\"2\" \n                                strokeLinecap=\"round\" \n                                strokeLinejoin=\"round\"\n                              >\n                                <polyline points=\"20 6 9 17 4 12\"></polyline>\n                              </svg>\n                              <span>{strength}</span>\n                            </li>\n                          ))}\n                        </ul>\n                      ) : (\n                        <p className=\"text-neutral-500\">No strengths identified yet.</p>\n                      )}\n                    </div>\n                    \n                    <div className=\"border rounded-lg p-4\">\n                      <h3 className=\"text-lg font-medium mb-3\">Areas to Improve</h3>\n                      {strengthsAndWeaknesses.weaknesses.length > 0 ? (\n                        <ul className=\"space-y-2\">\n                          {strengthsAndWeaknesses.weaknesses.map((weakness, index) => (\n                            <li key={index} className=\"flex items-start\">\n                              <svg \n                                className=\"w-5 h-5 text-[#F44336] mr-2 flex-shrink-0 mt-0.5\" \n                                xmlns=\"http://www.w3.org/2000/svg\" \n                                viewBox=\"0 0 24 24\" \n                                fill=\"none\" \n                                stroke=\"currentColor\" \n                                strokeWidth=\"2\" \n                                strokeLinecap=\"round\" \n                                strokeLinejoin=\"round\"\n                              >\n                                <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\n                                <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\n                              </svg>\n                              <span>{weakness}</span>\n                            </li>\n                          ))}\n                        </ul>\n                      ) : (\n                        <p className=\"text-neutral-500\">No areas for improvement identified yet.</p>\n                      )}\n                    </div>\n                  </div>\n                  \n                  {strengthsAndWeaknesses.recommendedAreas && strengthsAndWeaknesses.recommendedAreas.length > 0 && (\n                    <div className=\"border rounded-lg p-4\">\n                      <h3 className=\"text-lg font-medium mb-3\">Recommended Focus Areas</h3>\n                      <ul className=\"space-y-2\">\n                        {strengthsAndWeaknesses.recommendedAreas.map((area, index) => (\n                          <li key={index} className=\"flex items-start\">\n                            <svg \n                              className=\"w-5 h-5 text-blue-500 mr-2 flex-shrink-0 mt-0.5\" \n                              xmlns=\"http://www.w3.org/2000/svg\" \n                              viewBox=\"0 0 24 24\" \n                              fill=\"none\" \n                              stroke=\"currentColor\" \n                              strokeWidth=\"2\" \n                              strokeLinecap=\"round\" \n                              strokeLinejoin=\"round\"\n                            >\n                              <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n                              <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"16\"></line>\n                              <line x1=\"8\" y1=\"12\" x2=\"16\" y2=\"12\"></line>\n                            </svg>\n                            <span>{area}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n                  \n                  {knowledgeAreas.length > 0 && (\n                    <div className=\"border rounded-lg p-4\">\n                      <h3 className=\"text-lg font-medium mb-3\">Knowledge Areas</h3>\n                      <div className=\"space-y-4\">\n                        {knowledgeAreas.map((area) => (\n                          <div key={area.id}>\n                            <div className=\"flex justify-between mb-1\">\n                              <span className=\"text-sm font-medium\">{area.name}</span>\n                              <span className={`text-sm ${getScoreColor(area.proficiency)}`}>\n                                {area.proficiency}%\n                              </span>\n                            </div>\n                            <Progress value={area.proficiency} className=\"h-2\" />\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n                \n                <CardFooter>\n                  <div className=\"w-full flex flex-col sm:flex-row justify-between gap-2\">\n                    <Button \n                      variant=\"outline\"\n                      onClick={() => handleModeChange(\"analysis\")}\n                    >\n                      Take More Questions\n                    </Button>\n                    <Button \n                      className=\"bg-primary hover:bg-primary-dark\"\n                      onClick={() => handleModeChange(\"teaching\")}\n                    >\n                      Start Teaching Mode\n                    </Button>\n                  </div>\n                </CardFooter>\n              </Card>\n              \n              {/* Correct Answers Section */}\n              {showCorrectAnswers && answeredQuestions.length > 0 && (\n                <Card className=\"shadow-md mb-6\">\n                  <CardHeader>\n                    <CardTitle>Correct Answers</CardTitle>\n                    <CardDescription>\n                      Compare your answers with the correct ones\n                    </CardDescription>\n                  </CardHeader>\n                  \n                  <CardContent>\n                    <div className=\"space-y-6\">\n                      {answeredQuestions.map((qa) => {\n                        const answer = answers.get(qa.id);\n                        const correctAnswer = correctAnswers.get(qa.id);\n                        \n                        return (\n                          <div key={qa.id} className=\"border rounded-lg p-4\">\n                            <div className=\"flex items-center justify-between mb-3\">\n                              <h3 className=\"font-medium\">{qa.question}</h3>\n                              <span className={`text-sm ${getDifficultyColor(qa.difficulty)}`}>\n                                {qa.difficulty}\n                              </span>\n                            </div>\n                            \n                            <div className=\"mb-4\">\n                              <h4 className=\"text-sm font-medium mb-1\">Your Answer:</h4>\n                              <div className=\"bg-neutral-50 p-3 rounded-md\">\n                                <p className=\"text-neutral-700\">{answer?.userAnswer || \"Not answered\"}</p>\n                              </div>\n                            </div>\n                            \n                            <div>\n                              <h4 className=\"text-sm font-medium mb-1\">Correct Answer:</h4>\n                              <div className=\"bg-green-50 p-3 rounded-md border border-green-200\">\n                                <p className=\"text-neutral-700\">{correctAnswer || \"No correct answer provided\"}</p>\n                              </div>\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </div>\n        </div>\n      </main>\n      \n      <Footer />\n    </div>\n  );\n};\n\nexport default Feedback;\n","size_bytes":27354},"client/src/pages/history.tsx":{"content":"import React, { useEffect, useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { \n  Card, \n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardFooter\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from \"@/components/ui/tabs\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\n\ninterface HistorySession {\n  id: number;\n  topic: string;\n  date: string;\n  score?: number;\n  weaknesses?: string[];\n}\n\nconst History: React.FC = () => {\n  const [, navigate] = useLocation();\n  const [sessions, setSessions] = useState<HistorySession[]>([]);\n  const [activeTab, setActiveTab] = useState<string>(\"recent\");\n  \n  useEffect(() => {\n    // Load session history from localStorage\n    const savedSessions = localStorage.getItem('eduSessions');\n    if (savedSessions) {\n      try {\n        const parsed = JSON.parse(savedSessions);\n        setSessions(parsed);\n      } catch (e) {\n        console.error(\"Error loading session history from localStorage:\", e);\n      }\n    }\n  }, []);\n  \n  // Sort sessions by date (recent first)\n  const sortedSessions = [...sessions].sort((a, b) => {\n    return new Date(b.date).getTime() - new Date(a.date).getTime();\n  });\n  \n  // Filter sessions by score range\n  const highScoreSessions = sortedSessions.filter(session => (session.score || 0) >= 70);\n  const mediumScoreSessions = sortedSessions.filter(session => {\n    const score = session.score || 0;\n    return score >= 40 && score < 70;\n  });\n  const lowScoreSessions = sortedSessions.filter(session => (session.score || 0) < 40);\n  \n  // Function to format date nicely\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString(undefined, {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n  \n  // Function to get score color\n  const getScoreColor = (score: number) => {\n    if (score < 40) return \"text-red-600\";\n    if (score < 70) return \"text-yellow-600\";\n    return \"text-green-600\";\n  };\n  \n  // Function to render a session card\n  const renderSessionCard = (session: HistorySession) => (\n    <Card key={session.id} className=\"shadow-sm mb-4\">\n      <CardHeader className=\"pb-2\">\n        <CardTitle className=\"text-lg\">{session.topic}</CardTitle>\n        <CardDescription>{formatDate(session.date)}</CardDescription>\n      </CardHeader>\n      <CardContent className=\"pb-2\">\n        {session.score !== undefined && (\n          <div className=\"flex items-center mb-3\">\n            <span className=\"text-sm font-medium mr-2\">Score:</span>\n            <span className={`font-bold ${getScoreColor(session.score)}`}>{session.score}%</span>\n          </div>\n        )}\n        \n        {session.weaknesses && session.weaknesses.length > 0 && (\n          <div className=\"mt-2\">\n            <h4 className=\"text-sm font-medium mb-1\">Areas for improvement:</h4>\n            <ul className=\"list-disc list-inside text-sm text-neutral-600\">\n              {session.weaknesses.slice(0, 3).map((weakness, index) => (\n                <li key={index} className=\"truncate\">{weakness}</li>\n              ))}\n              {session.weaknesses.length > 3 && (\n                <li className=\"text-neutral-500\">\n                  +{session.weaknesses.length - 3} more\n                </li>\n              )}\n            </ul>\n          </div>\n        )}\n      </CardContent>\n      <CardFooter className=\"flex justify-end pt-2\">\n        <Button \n          variant=\"outline\" \n          onClick={() => navigate(`/?topic=${encodeURIComponent(session.topic)}`)}\n        >\n          Retake Test\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n  \n  return (\n    <div className=\"min-h-screen flex flex-col bg-neutral-50\">\n      <Header />\n      \n      <main className=\"flex-1 container mx-auto p-4 md:p-6\">\n        <div className=\"flex flex-col md:flex-row md:items-center mb-6 justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold mb-1\">Your Learning History</h1>\n            <p className=\"text-neutral-500\">Review your past sessions and track your progress</p>\n          </div>\n          <Button \n            onClick={() => navigate('/')}\n            className=\"mt-3 md:mt-0\"\n          >\n            Start New Session\n          </Button>\n        </div>\n        \n        <Tabs defaultValue=\"recent\" onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4 mb-6\">\n            <TabsTrigger value=\"recent\">Recent</TabsTrigger>\n            <TabsTrigger value=\"high\">High Scores</TabsTrigger>\n            <TabsTrigger value=\"medium\">Medium Scores</TabsTrigger>\n            <TabsTrigger value=\"low\">Low Scores</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"recent\">\n            {sortedSessions.length > 0 ? (\n              <div className=\"space-y-4\">\n                {sortedSessions.map(renderSessionCard)}\n              </div>\n            ) : (\n              <div className=\"text-center border rounded-lg p-8 bg-white\">\n                <svg \n                  className=\"w-12 h-12 mx-auto text-neutral-300 mb-4\" \n                  xmlns=\"http://www.w3.org/2000/svg\" \n                  viewBox=\"0 0 24 24\" \n                  fill=\"none\" \n                  stroke=\"currentColor\" \n                  strokeWidth=\"1\" \n                  strokeLinecap=\"round\" \n                  strokeLinejoin=\"round\"\n                >\n                  <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n                  <path d=\"M12 16v-4\"></path>\n                  <path d=\"M12 8h.01\"></path>\n                </svg>\n                <h2 className=\"text-xl font-semibold mb-2\">No History Yet</h2>\n                <p className=\"text-neutral-500 mb-6\">\n                  You haven't completed any learning sessions yet. Start one now!\n                </p>\n                <Button onClick={() => navigate('/')}>\n                  Start Learning Now\n                </Button>\n              </div>\n            )}\n          </TabsContent>\n          \n          <TabsContent value=\"high\">\n            {highScoreSessions.length > 0 ? (\n              <div className=\"space-y-4\">\n                {highScoreSessions.map(renderSessionCard)}\n              </div>\n            ) : (\n              <div className=\"text-center border rounded-lg p-8 bg-white\">\n                <svg \n                  className=\"w-12 h-12 mx-auto text-neutral-300 mb-4\" \n                  xmlns=\"http://www.w3.org/2000/svg\" \n                  viewBox=\"0 0 24 24\" \n                  fill=\"none\" \n                  stroke=\"currentColor\" \n                  strokeWidth=\"1\" \n                  strokeLinecap=\"round\" \n                  strokeLinejoin=\"round\"\n                >\n                  <path d=\"M12 2a10 10 0 1 0 0 20 10 10 0 0 0 0-20z\"></path>\n                  <path d=\"M8 14s1.5 2 4 2 4-2 4-2\"></path>\n                  <line x1=\"9\" y1=\"9\" x2=\"9.01\" y2=\"9\"></line>\n                  <line x1=\"15\" y1=\"9\" x2=\"15.01\" y2=\"9\"></line>\n                </svg>\n                <h2 className=\"text-xl font-semibold mb-2\">No High Scores Yet</h2>\n                <p className=\"text-neutral-500 mb-6\">\n                  Keep practicing to achieve high scores on your tests!\n                </p>\n                <Button onClick={() => navigate('/')}>\n                  Start Learning Now\n                </Button>\n              </div>\n            )}\n          </TabsContent>\n          \n          <TabsContent value=\"medium\">\n            {mediumScoreSessions.length > 0 ? (\n              <div className=\"space-y-4\">\n                {mediumScoreSessions.map(renderSessionCard)}\n              </div>\n            ) : (\n              <div className=\"text-center border rounded-lg p-8 bg-white\">\n                <svg \n                  className=\"w-12 h-12 mx-auto text-neutral-300 mb-4\" \n                  xmlns=\"http://www.w3.org/2000/svg\" \n                  viewBox=\"0 0 24 24\" \n                  fill=\"none\" \n                  stroke=\"currentColor\" \n                  strokeWidth=\"1\" \n                  strokeLinecap=\"round\" \n                  strokeLinejoin=\"round\"\n                >\n                  <path d=\"M12 2a10 10 0 1 0 0 20 10 10 0 0 0 0-20z\"></path>\n                  <path d=\"M8 14h8\"></path>\n                  <line x1=\"9\" y1=\"9\" x2=\"9.01\" y2=\"9\"></line>\n                  <line x1=\"15\" y1=\"9\" x2=\"15.01\" y2=\"9\"></line>\n                </svg>\n                <h2 className=\"text-xl font-semibold mb-2\">No Medium Scores</h2>\n                <p className=\"text-neutral-500 mb-6\">\n                  You don't have any tests with medium scores.\n                </p>\n                <Button onClick={() => navigate('/')}>\n                  Start Learning Now\n                </Button>\n              </div>\n            )}\n          </TabsContent>\n          \n          <TabsContent value=\"low\">\n            {lowScoreSessions.length > 0 ? (\n              <div className=\"space-y-4\">\n                {lowScoreSessions.map(renderSessionCard)}\n              </div>\n            ) : (\n              <div className=\"text-center border rounded-lg p-8 bg-white\">\n                <svg \n                  className=\"w-12 h-12 mx-auto text-neutral-300 mb-4\" \n                  xmlns=\"http://www.w3.org/2000/svg\" \n                  viewBox=\"0 0 24 24\" \n                  fill=\"none\" \n                  stroke=\"currentColor\" \n                  strokeWidth=\"1\" \n                  strokeLinecap=\"round\" \n                  strokeLinejoin=\"round\"\n                >\n                  <path d=\"M12 2a10 10 0 1 0 0 20 10 10 0 0 0 0-20z\"></path>\n                  <path d=\"M16 16s-1.5-2-4-2-4 2-4 2\"></path>\n                  <line x1=\"9\" y1=\"9\" x2=\"9.01\" y2=\"9\"></line>\n                  <line x1=\"15\" y1=\"9\" x2=\"15.01\" y2=\"9\"></line>\n                </svg>\n                <h2 className=\"text-xl font-semibold mb-2\">No Low Scores</h2>\n                <p className=\"text-neutral-500 mb-6\">\n                  Good job! You don't have any tests with low scores.\n                </p>\n                <Button onClick={() => navigate('/')}>\n                  Start Learning Now\n                </Button>\n              </div>\n            )}\n          </TabsContent>\n        </Tabs>\n      </main>\n      \n      <Footer />\n    </div>\n  );\n};\n\nexport default History;","size_bytes":10430},"client/src/pages/home.tsx":{"content":"import React, { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\nimport TopicSelectionModal from \"@/components/TopicSelectionModal\";\nimport { useSession } from \"@/contexts/SessionContext\";\n\n// Import the types needed for education and difficulty levels\ntype EducationLevel = \"Class 1-5\" | \"Class 6-8\" | \"Class 9-10\" | \"Class 11-12\" | \"Bachelors\" | \"Masters\" | \"PhD\";\ntype DifficultyLevel = \"Beginner\" | \"Standard\" | \"Advanced\";\n\nconst Home: React.FC = () => {\n  const [, navigate] = useLocation();\n  const [isTopicModalOpen, setIsTopicModalOpen] = useState(false);\n  const { createSession } = useSession();\n  \n  const handleStartSession = async (\n    topic: string, \n    educationLevel: EducationLevel, \n    difficultyLevel: DifficultyLevel\n  ) => {\n    try {\n      // For this demo, we'll use a fixed user ID of 1\n      const userId = 1;\n      \n      // Create the session with the topic, education level, and difficulty level\n      // For now, we'll store the education and difficulty levels in the topic string\n      // Format: \"TOPIC [Education: LEVEL, Difficulty: LEVEL]\"\n      const formattedTopic = `${topic} [Education: ${educationLevel}, Difficulty: ${difficultyLevel}]`;\n      \n      const session = await createSession(userId, formattedTopic);\n      navigate(`/analysis?sessionId=${session.id}`);\n    } catch (error) {\n      console.error(\"Failed to create session:\", error);\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col min-h-screen\">\n      <Header />\n      \n      <main className=\"flex-grow px-4 py-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          <section className=\"text-center mb-12\">\n            <h1 className=\"text-4xl md:text-5xl font-bold text-neutral-900 mb-4\">\n              Learn Smarter with \n              <span className=\"bg-gradient-to-r from-primary to-[#00BFA6] bg-clip-text text-transparent ml-2\">\n                AI-Powered Education\n              </span>\n            </h1>\n            <p className=\"text-lg text-neutral-600 max-w-2xl mx-auto mb-8\">\n              Experience the \"Analyze, Learn, and Repeat\" approach for personalized learning that adapts to your strengths and weaknesses.\n            </p>\n            \n            <Button \n              size=\"lg\" \n              className=\"bg-primary hover:bg-primary-dark text-white text-lg px-8 py-6\"\n              onClick={() => setIsTopicModalOpen(true)}\n            >\n              Start Learning\n            </Button>\n          </section>\n          \n          <section className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-12\">\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"mb-4 rounded-full bg-primary-50 w-12 h-12 flex items-center justify-center\">\n                  <svg \n                    className=\"w-6 h-6 text-primary\" \n                    xmlns=\"http://www.w3.org/2000/svg\" \n                    viewBox=\"0 0 24 24\" \n                    fill=\"none\" \n                    stroke=\"currentColor\" \n                    strokeWidth=\"2\" \n                    strokeLinecap=\"round\" \n                    strokeLinejoin=\"round\"\n                  >\n                    <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n                    <path d=\"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3\"></path>\n                    <line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line>\n                  </svg>\n                </div>\n                <h3 className=\"text-lg font-semibold mb-2\">Self-Analysis</h3>\n                <p className=\"text-neutral-600\">\n                  Test your knowledge with AI-generated questions of varying difficulty levels and receive personalized feedback.\n                </p>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"mb-4 rounded-full bg-primary-50 w-12 h-12 flex items-center justify-center\">\n                  <svg \n                    className=\"w-6 h-6 text-primary\" \n                    xmlns=\"http://www.w3.org/2000/svg\" \n                    viewBox=\"0 0 24 24\" \n                    fill=\"none\" \n                    stroke=\"currentColor\" \n                    strokeWidth=\"2\" \n                    strokeLinecap=\"round\" \n                    strokeLinejoin=\"round\"\n                  >\n                    <path d=\"M22 10v6M2 10l10-5 10 5-10 5z\"></path>\n                    <path d=\"M6 12v5c0 2 2 3 6 3s6-1 6-3v-5\"></path>\n                  </svg>\n                </div>\n                <h3 className=\"text-lg font-semibold mb-2\">AI Teaching Mode</h3>\n                <p className=\"text-neutral-600\">\n                  Get interactive explanations from AI tailored to your learning style with examples, analogies, and step-by-step guidance.\n                </p>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"mb-4 rounded-full bg-primary-50 w-12 h-12 flex items-center justify-center\">\n                  <svg \n                    className=\"w-6 h-6 text-primary\" \n                    xmlns=\"http://www.w3.org/2000/svg\" \n                    viewBox=\"0 0 24 24\" \n                    fill=\"none\" \n                    stroke=\"currentColor\" \n                    strokeWidth=\"2\" \n                    strokeLinecap=\"round\" \n                    strokeLinejoin=\"round\"\n                  >\n                    <path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"></path>\n                    <polyline points=\"14 2 14 8 20 8\"></polyline>\n                    <line x1=\"16\" y1=\"13\" x2=\"8\" y2=\"13\"></line>\n                    <line x1=\"16\" y1=\"17\" x2=\"8\" y2=\"17\"></line>\n                    <polyline points=\"10 9 9 9 8 9\"></polyline>\n                  </svg>\n                </div>\n                <h3 className=\"text-lg font-semibold mb-2\">Personalized Content</h3>\n                <p className=\"text-neutral-600\">\n                  Generate study notes, practice questions, and learning materials that focus on your weak areas for targeted improvement.\n                </p>\n              </CardContent>\n            </Card>\n          </section>\n          \n          <section className=\"bg-neutral-50 p-6 md:p-8 rounded-xl\">\n            <h2 className=\"text-2xl font-bold mb-4\">How it Works</h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 text-center\">\n              <div>\n                <div className=\"rounded-full bg-primary-50 w-10 h-10 flex items-center justify-center mx-auto mb-2\">\n                  <span className=\"font-bold text-primary\">1</span>\n                </div>\n                <h3 className=\"font-medium mb-1\">Select a Topic</h3>\n                <p className=\"text-sm text-neutral-600\">Choose any subject you want to learn</p>\n              </div>\n              \n              <div>\n                <div className=\"rounded-full bg-primary-50 w-10 h-10 flex items-center justify-center mx-auto mb-2\">\n                  <span className=\"font-bold text-primary\">2</span>\n                </div>\n                <h3 className=\"font-medium mb-1\">Test Your Knowledge</h3>\n                <p className=\"text-sm text-neutral-600\">Answer AI-generated questions</p>\n              </div>\n              \n              <div>\n                <div className=\"rounded-full bg-primary-50 w-10 h-10 flex items-center justify-center mx-auto mb-2\">\n                  <span className=\"font-bold text-primary\">3</span>\n                </div>\n                <h3 className=\"font-medium mb-1\">Get Personalized Feedback</h3>\n                <p className=\"text-sm text-neutral-600\">AI evaluates your strengths and weaknesses</p>\n              </div>\n              \n              <div>\n                <div className=\"rounded-full bg-primary-50 w-10 h-10 flex items-center justify-center mx-auto mb-2\">\n                  <span className=\"font-bold text-primary\">4</span>\n                </div>\n                <h3 className=\"font-medium mb-1\">Learn Interactively</h3>\n                <p className=\"text-sm text-neutral-600\">Use AI teaching mode to fill knowledge gaps</p>\n              </div>\n            </div>\n          </section>\n        </div>\n      </main>\n      \n      <Footer />\n      \n      <TopicSelectionModal\n        open={isTopicModalOpen}\n        onOpenChange={setIsTopicModalOpen}\n        onSelectTopic={handleStartSession}\n      />\n    </div>\n  );\n};\n\nexport default Home;\n","size_bytes":8596},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/progress.tsx":{"content":"import React, { useEffect, useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { \n  Card, \n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardFooter\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from \"@/components/ui/tabs\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\n\ninterface WeaknessData {\n  topic: string;\n  area: string;\n  count: number;\n  lastSeen: string;\n}\n\ninterface StrengthData {\n  topic: string;\n  area: string;\n  count: number;\n  lastSeen: string;\n}\n\nconst Progress: React.FC = () => {\n  const [, navigate] = useLocation();\n  const [weaknesses, setWeaknesses] = useState<WeaknessData[]>([]);\n  const [strengths, setStrengths] = useState<StrengthData[]>([]);\n  const [activeTab, setActiveTab] = useState<string>(\"weaknesses\");\n  \n  useEffect(() => {\n    // Load weaknesses from localStorage\n    const savedWeaknesses = localStorage.getItem('eduWeaknesses');\n    if (savedWeaknesses) {\n      try {\n        setWeaknesses(JSON.parse(savedWeaknesses));\n      } catch (e) {\n        console.error(\"Error loading weaknesses from localStorage:\", e);\n      }\n    }\n    \n    // Load strengths from localStorage\n    const savedStrengths = localStorage.getItem('eduStrengths');\n    if (savedStrengths) {\n      try {\n        setStrengths(JSON.parse(savedStrengths));\n      } catch (e) {\n        console.error(\"Error loading strengths from localStorage:\", e);\n      }\n    }\n  }, []);\n  \n  return (\n    <div className=\"min-h-screen flex flex-col bg-neutral-50\">\n      <Header />\n      \n      <main className=\"flex-1 container mx-auto p-4 md:p-6\">\n        <div className=\"flex flex-col md:flex-row md:items-center mb-6 justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold mb-1\">Your Learning Progress</h1>\n            <p className=\"text-neutral-500\">Track your strengths and areas for improvement</p>\n          </div>\n          <Button \n            onClick={() => navigate('/')}\n            className=\"mt-3 md:mt-0\"\n          >\n            Start New Session\n          </Button>\n        </div>\n        \n        <Tabs defaultValue=\"weaknesses\" onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2 mb-6\">\n            <TabsTrigger value=\"weaknesses\">Areas to Improve</TabsTrigger>\n            <TabsTrigger value=\"strengths\">Strengths</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"weaknesses\">\n            {weaknesses.length > 0 ? (\n              <div className=\"space-y-4\">\n                {weaknesses.map((weakness, index) => (\n                  <Card key={index} className=\"shadow-sm\">\n                    <CardHeader className=\"pb-2\">\n                      <CardTitle className=\"text-lg\">{weakness.area}</CardTitle>\n                      <CardDescription>Topic: {weakness.topic}</CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"pb-2\">\n                      <div className=\"flex justify-between items-center text-sm\">\n                        <span className=\"text-neutral-500\">\n                          Identified {weakness.count} {weakness.count === 1 ? 'time' : 'times'}\n                        </span>\n                        <span className=\"text-neutral-500\">\n                          Last seen: {new Date(weakness.lastSeen).toLocaleDateString()}\n                        </span>\n                      </div>\n                    </CardContent>\n                    <CardFooter className=\"flex justify-end\">\n                      <Button \n                        variant=\"outline\" \n                        onClick={() => navigate(`/?topic=${encodeURIComponent(weakness.topic)}`)}\n                      >\n                        Practice This Topic\n                      </Button>\n                    </CardFooter>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center border rounded-lg p-8 bg-white\">\n                <svg \n                  className=\"w-12 h-12 mx-auto text-neutral-300 mb-4\" \n                  xmlns=\"http://www.w3.org/2000/svg\" \n                  viewBox=\"0 0 24 24\" \n                  fill=\"none\" \n                  stroke=\"currentColor\" \n                  strokeWidth=\"1\" \n                  strokeLinecap=\"round\" \n                  strokeLinejoin=\"round\"\n                >\n                  <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n                  <path d=\"M12 16v-4\"></path>\n                  <path d=\"M12 8h.01\"></path>\n                </svg>\n                <h2 className=\"text-xl font-semibold mb-2\">No Areas for Improvement Yet</h2>\n                <p className=\"text-neutral-500 mb-6\">\n                  Complete more learning sessions to identify areas where you can improve\n                </p>\n                <Button onClick={() => navigate('/')}>\n                  Start Learning Now\n                </Button>\n              </div>\n            )}\n          </TabsContent>\n          \n          <TabsContent value=\"strengths\">\n            {strengths.length > 0 ? (\n              <div className=\"space-y-4\">\n                {strengths.map((strength, index) => (\n                  <Card key={index} className=\"shadow-sm border-green-100\">\n                    <CardHeader className=\"pb-2\">\n                      <CardTitle className=\"text-lg text-green-700\">{strength.area}</CardTitle>\n                      <CardDescription>Topic: {strength.topic}</CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"pb-2\">\n                      <div className=\"flex justify-between items-center text-sm\">\n                        <span className=\"text-neutral-500\">\n                          Identified {strength.count} {strength.count === 1 ? 'time' : 'times'}\n                        </span>\n                        <span className=\"text-neutral-500\">\n                          Last seen: {new Date(strength.lastSeen).toLocaleDateString()}\n                        </span>\n                      </div>\n                    </CardContent>\n                    <CardFooter className=\"flex justify-end\">\n                      <Button \n                        variant=\"outline\"\n                        className=\"border-green-200 text-green-700 hover:bg-green-50\"\n                        onClick={() => navigate(`/?topic=${encodeURIComponent(strength.topic)}`)}\n                      >\n                        Enhance This Skill\n                      </Button>\n                    </CardFooter>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center border rounded-lg p-8 bg-white\">\n                <svg \n                  className=\"w-12 h-12 mx-auto text-neutral-300 mb-4\" \n                  xmlns=\"http://www.w3.org/2000/svg\" \n                  viewBox=\"0 0 24 24\" \n                  fill=\"none\" \n                  stroke=\"currentColor\" \n                  strokeWidth=\"1\" \n                  strokeLinecap=\"round\" \n                  strokeLinejoin=\"round\"\n                >\n                  <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n                  <path d=\"M8 14s1.5 2 4 2 4-2 4-2\"></path>\n                  <line x1=\"9\" y1=\"9\" x2=\"9.01\" y2=\"9\"></line>\n                  <line x1=\"15\" y1=\"9\" x2=\"15.01\" y2=\"9\"></line>\n                </svg>\n                <h2 className=\"text-xl font-semibold mb-2\">No Strengths Identified Yet</h2>\n                <p className=\"text-neutral-500 mb-6\">\n                  Complete more learning sessions to identify your academic strengths\n                </p>\n                <Button onClick={() => navigate('/')}>\n                  Start Learning Now\n                </Button>\n              </div>\n            )}\n          </TabsContent>\n        </Tabs>\n      </main>\n      \n      <Footer />\n    </div>\n  );\n};\n\nexport default Progress;","size_bytes":8002},"client/src/pages/teaching.tsx":{"content":"import React, { useEffect, useState, useRef, useMemo } from \"react\";\nimport { useLocation, useRoute } from \"wouter\";\nimport { \n  Card, \n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\nimport WorkflowProgress from \"@/components/WorkflowProgress\";\nimport SidePanel from \"@/components/SidePanel\";\nimport { useSession } from \"@/contexts/SessionContext\";\nimport { getTeachingContent, generateStudyNotes } from \"@/lib/gemini\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { KnowledgeArea } from \"@shared/schema\";\nimport ReactMarkdown from \"react-markdown\";\n\n// Define markdown components outside of the component render function\nconst markdownComponentsNotes = {\n  p: ({node, ...props}: any) => <p className=\"my-2\" {...props} />,\n  h1: ({node, ...props}: any) => <h1 className=\"text-2xl font-bold mt-6 mb-4\" {...props} />,\n  h2: ({node, ...props}: any) => <h2 className=\"text-xl font-bold mt-5 mb-3\" {...props} />,\n  h3: ({node, ...props}: any) => <h3 className=\"text-lg font-bold mt-4 mb-2\" {...props} />,\n  ul: ({node, ...props}: any) => <ul className=\"list-disc pl-6 my-3\" {...props} />,\n  ol: ({node, ...props}: any) => <ol className=\"list-decimal pl-6 my-3\" {...props} />,\n  li: ({node, ...props}: any) => <li className=\"my-1\" {...props} />,\n  code: ({node, ...props}: any) => <code className=\"bg-neutral-100 px-1 py-0.5 rounded text-sm\" {...props} />,\n  pre: ({node, ...props}: any) => <pre className=\"bg-neutral-100 p-3 rounded my-3 overflow-x-auto\" {...props} />,\n  blockquote: ({node, ...props}: any) => <blockquote className=\"border-l-4 border-primary/30 pl-4 italic my-3\" {...props} />,\n};\n\nconst markdownComponentsMessage = {\n  p: ({node, ...props}: any) => <p className=\"my-2\" {...props} />,\n  h1: ({node, ...props}: any) => <h1 className=\"text-xl font-bold mt-4 mb-2\" {...props} />,\n  h2: ({node, ...props}: any) => <h2 className=\"text-lg font-bold mt-3 mb-2\" {...props} />,\n  h3: ({node, ...props}: any) => <h3 className=\"text-base font-bold mt-2 mb-1\" {...props} />,\n  ul: ({node, ...props}: any) => <ul className=\"list-disc pl-5 my-2\" {...props} />,\n  ol: ({node, ...props}: any) => <ol className=\"list-decimal pl-5 my-2\" {...props} />,\n  li: ({node, ...props}: any) => <li className=\"my-1\" {...props} />,\n  code: ({node, ...props}: any) => <code className=\"bg-neutral-100 px-1 py-0.5 rounded text-sm\" {...props} />,\n  pre: ({node, ...props}: any) => <pre className=\"bg-neutral-100 p-2 rounded my-2 overflow-x-auto text-sm\" {...props} />,\n  blockquote: ({node, ...props}: any) => <blockquote className=\"border-l-4 border-primary/30 pl-3 italic my-2\" {...props} />,\n};\n\ninterface AIMessage {\n  role: 'user' | 'ai';\n  content: string;\n  followUpQuestions?: string[];\n}\n\nconst Teaching: React.FC = () => {\n  const [, params] = useRoute(\"/teaching\");\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const sessionId = params ? parseInt(new URLSearchParams(window.location.search).get(\"sessionId\") || \"0\") : 0;\n  const action = params ? new URLSearchParams(window.location.search).get(\"action\") || null : null;\n  \n  const { \n    currentSession, \n    loadSession, \n    knowledgeAreas, \n    sessionTime,\n    updateSessionStage\n  } = useSession();\n  \n  const [isLoading, setIsLoading] = useState(false);\n  const [messages, setMessages] = useState<AIMessage[]>([]);\n  const [currentQuery, setCurrentQuery] = useState(\"\");\n  const [selectedQuestion, setSelectedQuestion] = useState<string>(\"\");\n  const [showQuiz, setShowQuiz] = useState(false);\n  const [generatingNotes, setGeneratingNotes] = useState(false);\n  const [studyNotes, setStudyNotes] = useState<string | null>(null);\n  \n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  \n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n  \n  // Scroll to bottom when messages update\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  \n  // Load session data\n  useEffect(() => {\n    if (sessionId) {\n      loadSession(sessionId);\n    }\n  }, [sessionId, loadSession]);\n  \n  // Use a ref to track if we've already initiated actions\n  const actionsInitiated = useRef(false);\n  \n  // Initialize teaching mode or handle notes generation\n  useEffect(() => {\n    if (currentSession && !actionsInitiated.current && !isLoading) {\n      // Mark as initiated to prevent further calls\n      actionsInitiated.current = true;\n      \n      if (action === 'notes') {\n        // Handle notes generation\n        setTimeout(() => {\n          handleGenerateNotes();\n        }, 100);\n      } else if (messages.length === 0) {\n        // Handle teaching content\n        const initialQuery = `Hey buddy, I am stuck on ${currentSession.topic}, can you teach me in an engaging way?`;\n        \n        // Set the initial message immediately\n        setMessages([\n          {\n            role: 'user',\n            content: initialQuery\n          }\n        ]);\n        \n        // Use setTimeout to make sure UI updates before the API call\n        setTimeout(() => {\n          fetchTeachingContent(initialQuery);\n        }, 200);\n      }\n    }\n    \n    // Reset the initiated flag when key dependencies change\n    return () => {\n      if (!currentSession) {\n        actionsInitiated.current = false;\n      }\n    };\n  }, [currentSession, isLoading, action]);\n  \n  const fetchTeachingContent = async (query: string) => {\n    if (!currentSession) return;\n    \n    setIsLoading(true);\n    toast({\n      title: \"Generating teaching content...\",\n      description: \"Please wait while we prepare your learning materials.\",\n      duration: 3000,\n    });\n    \n    try {\n      const topicQuery = query.includes(currentSession.topic) \n        ? query \n        : `${query} (regarding ${currentSession.topic})`;\n      \n      const response = await getTeachingContent(currentSession.topic, topicQuery);\n      \n      if (!response || !response.text) {\n        throw new Error(\"Received empty response from teaching API\");\n      }\n      \n      setMessages(prev => [\n        ...prev,\n        {\n          role: 'ai',\n          content: response.text,\n          followUpQuestions: response.followUpQuestions\n        }\n      ]);\n      \n      // Show quiz after the AI response \n      if (response.followUpQuestions && response.followUpQuestions.length > 0) {\n        setSelectedQuestion(\"\");\n        setShowQuiz(true);\n      }\n      \n      // Success toast notification\n      toast({\n        title: \"Content ready!\",\n        description: \"Your learning content has been generated successfully.\",\n        duration: 2000,\n      });\n    } catch (error) {\n      console.error(\"Failed to get teaching content:\", error);\n      \n      // Add a fallback AI message if the API call fails\n      setMessages(prev => [\n        ...prev,\n        {\n          role: 'ai',\n          content: \"I'm sorry, I had trouble generating content about this topic. Please try rephrasing your question or try a different topic.\",\n          followUpQuestions: [\"Could you try asking a more specific question?\"]\n        }\n      ]);\n      \n      toast({\n        title: \"Error\",\n        description: \"Failed to generate teaching content. Please try again with a different query.\",\n        variant: \"destructive\",\n        duration: 5000,\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  const handleSendMessage = async () => {\n    if (!currentQuery.trim() || isLoading) return;\n    \n    // Add user message to chat\n    setMessages(prev => [\n      ...prev,\n      {\n        role: 'user',\n        content: currentQuery\n      }\n    ]);\n    \n    const query = currentQuery;\n    setCurrentQuery(\"\");\n    await fetchTeachingContent(query);\n  };\n  \n  // Use a ref to track if notes generation is in progress to prevent multiple calls\n  const notesGenerationInProgress = useRef(false);\n  \n  const handleGenerateNotes = async () => {\n    // Prevent multiple calls or generating notes if they already exist\n    if (!currentSession || studyNotes || notesGenerationInProgress.current || generatingNotes) {\n      return;\n    }\n    \n    // Set both state and ref to indicate generation is in progress\n    setGeneratingNotes(true);\n    notesGenerationInProgress.current = true;\n    \n    toast({\n      title: \"Generating study notes...\",\n      description: \"Please wait while we prepare your personalized notes.\",\n      duration: 3000,\n    });\n    \n    try {\n      // Get weak areas from knowledge areas with low proficiency \n      const weakAreas = knowledgeAreas\n        .filter(area => area.proficiency < 50)\n        .map(area => area.name);\n      \n      // Generate notes with the main topic and optional weak areas\n      const response = await generateStudyNotes(\n        currentSession.topic,\n        weakAreas.length > 0 ? weakAreas : undefined\n      );\n      \n      if (response && response.notes) {\n        setStudyNotes(response.notes);\n        toast({\n          title: \"Notes ready!\",\n          description: \"Your study notes have been generated successfully.\",\n          duration: 2000,\n        });\n      } else {\n        throw new Error(\"Failed to generate notes - empty response\");\n      }\n    } catch (error) {\n      console.error(\"Failed to generate study notes:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate study notes. Please try again.\",\n        variant: \"destructive\",\n        duration: 5000,\n      });\n      \n      // Set a fallback note so the UI doesn't break\n      setStudyNotes(`# Study Notes for ${currentSession.topic}\\n\\nI'm sorry, but I'm having trouble generating detailed study notes right now. Please try again in a moment.`);\n    } finally {\n      setGeneratingNotes(false);\n      // Don't reset the ref - notes have been generated or failed to generate\n      // We only want to reset this if the user actively restarts the experience\n    }\n  };\n  \n  const handleModeChange = async (mode: \"analysis\" | \"feedback\" | \"teaching\" | \"retest\") => {\n    if (mode === \"analysis\") {\n      await updateSessionStage(\"analysis\");\n      navigate(`/analysis?sessionId=${sessionId}`);\n    } else if (mode === \"feedback\") {\n      await updateSessionStage(\"feedback\");\n      navigate(`/feedback?sessionId=${sessionId}`);\n    } else if (mode === \"retest\") {\n      await updateSessionStage(\"retest\");\n      navigate(`/analysis?sessionId=${sessionId}`);\n    }\n  };\n  \n  const handleQuizAnswer = () => {\n    setShowQuiz(false);\n    toast({\n      title: \"Answer Reviewed\",\n      description: \"Great job! Let's continue with our learning session.\",\n    });\n  };\n  \n  const handleRestart = () => {\n    setMessages([]);\n    setStudyNotes(null);\n    // Reset all the relevant flags to allow for new content\n    actionsInitiated.current = false;\n    notesGenerationInProgress.current = false;\n    \n    // Small delay to ensure state is updated before potentially triggering new fetches\n    setTimeout(() => {\n      if (currentSession && messages.length === 0 && !studyNotes) {\n        // Trigger the initial message for teaching mode\n        const initialQuery = `Let's learn about ${currentSession.topic}. Can you introduce this topic?`;\n        setMessages([\n          {\n            role: 'user',\n            content: initialQuery\n          }\n        ]);\n        \n        fetchTeachingContent(initialQuery);\n      }\n    }, 300);\n  };\n  \n  if (!currentSession) {\n    return (\n      <div className=\"flex flex-col min-h-screen\">\n        <Header />\n        <main className=\"flex-grow px-4 py-6\">\n          <div className=\"max-w-7xl mx-auto\">\n            <div className=\"flex justify-center items-center h-[60vh]\">\n              <Card className=\"w-full max-w-md\">\n                <CardContent className=\"pt-6\">\n                  <div className=\"space-y-4\">\n                    <Skeleton className=\"h-8 w-full\" />\n                    <Skeleton className=\"h-4 w-3/4\" />\n                    <Skeleton className=\"h-24 w-full\" />\n                    <Skeleton className=\"h-10 w-full\" />\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"flex flex-col min-h-screen\">\n      <Header />\n      \n      <main className=\"flex-grow px-4 py-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          <WorkflowProgress \n            currentStage=\"teaching\" \n            sessionTime={sessionTime}\n          />\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n            <div className=\"lg:col-span-1\">\n              <SidePanel \n                topic={currentSession.topic}\n                mode=\"teaching\"\n                knowledgeAreas={knowledgeAreas}\n                onModeChange={handleModeChange}\n                onGenerateNotes={handleGenerateNotes}\n                onGenerateQuestions={() => handleModeChange(\"analysis\")}\n                activeAction={action === \"notes\" ? \"notes\" : null}\n              />\n            </div>\n            \n            <div className=\"lg:col-span-3\">\n              <Card className=\"shadow-md\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle>\n                      {studyNotes ? \"Study Notes: \" : \"Teaching Mode: \"}\n                      <span className=\"text-primary\">{currentSession.topic}</span>\n                    </CardTitle>\n                    <Button \n                      variant=\"ghost\" \n                      onClick={handleRestart}\n                      className=\"flex items-center text-neutral-600 hover:text-primary transition-colors text-sm\"\n                    >\n                      <svg \n                        className=\"w-4 h-4 mr-1\" \n                        xmlns=\"http://www.w3.org/2000/svg\" \n                        viewBox=\"0 0 24 24\" \n                        fill=\"none\" \n                        stroke=\"currentColor\" \n                        strokeWidth=\"2\" \n                        strokeLinecap=\"round\" \n                        strokeLinejoin=\"round\"\n                      >\n                        <path d=\"M3 2v6h6\"></path>\n                        <path d=\"M3 13a9 9 0 1 0 3-7.7L3 8\"></path>\n                      </svg>\n                      Restart\n                    </Button>\n                  </div>\n                  <CardDescription>\n                    {studyNotes \n                      ? \"Personalized notes created for your learning\" \n                      : \"Interactive learning with AI-powered explanations\"\n                    }\n                  </CardDescription>\n                </CardHeader>\n                \n                <CardContent>\n                  {studyNotes ? (\n                    // Study Notes View\n                    <div className=\"prose prose-sm max-w-none\">\n                      {generatingNotes ? (\n                        <div className=\"space-y-4\">\n                          <Skeleton className=\"h-6 w-3/4\" />\n                          <Skeleton className=\"h-4 w-full\" />\n                          <Skeleton className=\"h-4 w-full\" />\n                          <Skeleton className=\"h-4 w-2/3\" />\n                          <Skeleton className=\"h-6 w-1/2\" />\n                          <Skeleton className=\"h-4 w-full\" />\n                          <Skeleton className=\"h-4 w-full\" />\n                        </div>\n                      ) : (\n                        <ReactMarkdown\n                          components={markdownComponentsNotes}\n                        >\n                          {studyNotes || \"\"}\n                        </ReactMarkdown>\n                      )}\n                    </div>\n                  ) : (\n                    // Teaching Mode View\n                    <div>\n                      {messages.length > 0 && (\n                        <div className=\"mb-6 space-y-4\">\n                          {messages.map((msg, index) => (\n                            <div key={index} className={`flex ${msg.role === 'user' ? 'justify-end' : ''}`}>\n                              {msg.role === 'ai' && (\n                                <div className=\"flex-shrink-0 mr-3\">\n                                  <div className=\"w-10 h-10 rounded-full bg-primary flex items-center justify-center text-white\">\n                                    <svg \n                                      className=\"w-6 h-6\" \n                                      xmlns=\"http://www.w3.org/2000/svg\" \n                                      viewBox=\"0 0 24 24\" \n                                      fill=\"none\" \n                                      stroke=\"currentColor\" \n                                      strokeWidth=\"2\" \n                                      strokeLinecap=\"round\" \n                                      strokeLinejoin=\"round\"\n                                    >\n                                      <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n                                      <path d=\"M12 16v-4\"></path>\n                                      <path d=\"M12 8h.01\"></path>\n                                    </svg>\n                                  </div>\n                                </div>\n                              )}\n                              \n                              {msg.role === 'user' ? (\n                                <div className=\"bg-neutral-100 p-4 rounded-lg text-neutral-600 max-w-[80%]\">\n                                  <p>{msg.content}</p>\n                                </div>\n                              ) : (\n                                <div className=\"space-y-3 max-w-[90%]\">\n                                  <div className=\"prose prose-sm p-4 rounded-lg bg-primary/5 border border-primary/10\">\n                                    {isLoading && index === messages.length - 1 ? (\n                                      <div className=\"space-y-2\">\n                                        <Skeleton className=\"h-4 w-full\" />\n                                        <Skeleton className=\"h-4 w-full\" />\n                                        <Skeleton className=\"h-4 w-3/4\" />\n                                      </div>\n                                    ) : (\n                                      <ReactMarkdown\n                                        components={markdownComponentsMessage}\n                                      >\n                                        {msg.content}\n                                      </ReactMarkdown>\n                                    )}\n                                  </div>\n                                </div>\n                              )}\n                            </div>\n                          ))}\n                          <div ref={messagesEndRef} />\n                        </div>\n                      )}\n                      \n                      {showQuiz && messages.length > 0 && messages[messages.length - 1].followUpQuestions && (\n                        <div className=\"border-t border-neutral-200 pt-4 mt-6\">\n                          <h3 className=\"font-medium mb-3\">Let's check your understanding:</h3>\n                          <div className=\"p-4 rounded-lg bg-primary bg-opacity-5 border border-primary-light\">\n                            <p className=\"mb-4\">{messages[messages.length - 1].followUpQuestions?.[0]}</p>\n                            \n                            <RadioGroup value={selectedQuestion} onValueChange={setSelectedQuestion} className=\"space-y-2 mt-4\">\n                              <div className=\"flex items-center space-x-2\">\n                                <RadioGroupItem value=\"option1\" id=\"option1\" />\n                                <Label htmlFor=\"option1\">It remains in its current state</Label>\n                              </div>\n                              <div className=\"flex items-center space-x-2\">\n                                <RadioGroupItem value=\"option2\" id=\"option2\" />\n                                <Label htmlFor=\"option2\">It changes to the opposite state</Label>\n                              </div>\n                              <div className=\"flex items-center space-x-2\">\n                                <RadioGroupItem value=\"option3\" id=\"option3\" />\n                                <Label htmlFor=\"option3\">It enters a superposition state</Label>\n                              </div>\n                            </RadioGroup>\n                            \n                            <Button \n                              className=\"mt-4 bg-primary text-white\"\n                              onClick={handleQuizAnswer}\n                              disabled={!selectedQuestion}\n                            >\n                              Check Answer\n                            </Button>\n                          </div>\n                        </div>\n                      )}\n                      \n                      {/* User Chat Interface */}\n                      <div className=\"mt-8\">\n                        <div className=\"border rounded-lg\">\n                          <div className=\"flex items-center p-2 border-b\">\n                            <button className=\"p-2 text-neutral-500 hover:text-neutral-700 transition-colors\">\n                              <svg \n                                className=\"w-5 h-5\" \n                                xmlns=\"http://www.w3.org/2000/svg\" \n                                viewBox=\"0 0 24 24\" \n                                fill=\"none\" \n                                stroke=\"currentColor\" \n                                strokeWidth=\"2\" \n                                strokeLinecap=\"round\" \n                                strokeLinejoin=\"round\"\n                              >\n                                <path d=\"M6 4h8a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z\"></path>\n                                <path d=\"M6 12h9a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z\"></path>\n                              </svg>\n                            </button>\n                            <button className=\"p-2 text-neutral-500 hover:text-neutral-700 transition-colors\">\n                              <svg \n                                className=\"w-5 h-5\" \n                                xmlns=\"http://www.w3.org/2000/svg\" \n                                viewBox=\"0 0 24 24\" \n                                fill=\"none\" \n                                stroke=\"currentColor\" \n                                strokeWidth=\"2\" \n                                strokeLinecap=\"round\" \n                                strokeLinejoin=\"round\"\n                              >\n                                <path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path>\n                                <path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path>\n                              </svg>\n                            </button>\n                            <button className=\"p-2 text-neutral-500 hover:text-neutral-700 transition-colors\">\n                              <svg \n                                className=\"w-5 h-5\" \n                                xmlns=\"http://www.w3.org/2000/svg\" \n                                viewBox=\"0 0 24 24\" \n                                fill=\"none\" \n                                stroke=\"currentColor\" \n                                strokeWidth=\"2\" \n                                strokeLinecap=\"round\" \n                                strokeLinejoin=\"round\"\n                              >\n                                <line x1=\"8\" y1=\"6\" x2=\"21\" y2=\"6\"></line>\n                                <line x1=\"8\" y1=\"12\" x2=\"21\" y2=\"12\"></line>\n                                <line x1=\"8\" y1=\"18\" x2=\"21\" y2=\"18\"></line>\n                                <line x1=\"3\" y1=\"6\" x2=\"3.01\" y2=\"6\"></line>\n                                <line x1=\"3\" y1=\"12\" x2=\"3.01\" y2=\"12\"></line>\n                                <line x1=\"3\" y1=\"18\" x2=\"3.01\" y2=\"18\"></line>\n                              </svg>\n                            </button>\n                            <button className=\"p-2 text-neutral-500 hover:text-neutral-700 transition-colors\">\n                              <svg \n                                className=\"w-5 h-5\" \n                                xmlns=\"http://www.w3.org/2000/svg\" \n                                viewBox=\"0 0 24 24\" \n                                fill=\"none\" \n                                stroke=\"currentColor\" \n                                strokeWidth=\"2\" \n                                strokeLinecap=\"round\" \n                                strokeLinejoin=\"round\"\n                              >\n                                <polyline points=\"4 7 4 4 20 4 20 7\"></polyline>\n                                <line x1=\"9\" y1=\"20\" x2=\"15\" y2=\"20\"></line>\n                                <line x1=\"12\" y1=\"4\" x2=\"12\" y2=\"20\"></line>\n                              </svg>\n                            </button>\n                          </div>\n                          <Textarea \n                            className=\"w-full p-3 outline-none resize-none border-none\"\n                            rows={3} \n                            placeholder=\"Ask a follow-up question or tell me which part you'd like me to explain more...\" \n                            value={currentQuery}\n                            onChange={(e) => setCurrentQuery(e.target.value)}\n                            onKeyDown={(e) => {\n                              if (e.key === 'Enter' && !e.shiftKey) {\n                                e.preventDefault();\n                                handleSendMessage();\n                              }\n                            }}\n                            disabled={isLoading}\n                          />\n                        </div>\n                        <div className=\"flex justify-between mt-3\">\n                          <button className=\"flex items-center text-neutral-600 hover:text-primary-dark transition-colors\">\n                            <svg \n                              className=\"w-5 h-5 mr-1\" \n                              xmlns=\"http://www.w3.org/2000/svg\" \n                              viewBox=\"0 0 24 24\" \n                              fill=\"none\" \n                              stroke=\"currentColor\" \n                              strokeWidth=\"2\" \n                              strokeLinecap=\"round\" \n                              strokeLinejoin=\"round\"\n                            >\n                              <path d=\"M12 2a3 3 0 0 0-3 3v7a3 3 0 0 0 6 0V5a3 3 0 0 0-3-3Z\"></path>\n                              <path d=\"M19 10v2a7 7 0 0 1-14 0v-2\"></path>\n                              <line x1=\"12\" y1=\"19\" x2=\"12\" y2=\"22\"></line>\n                            </svg>\n                            <span>Voice</span>\n                          </button>\n                          <div>\n                            <Button \n                              variant=\"outline\"\n                              className=\"mr-2\"\n                              onClick={handleGenerateNotes}\n                            >\n                              Generate Notes\n                            </Button>\n                            <Button \n                              className=\"bg-primary text-white\"\n                              onClick={handleSendMessage}\n                              disabled={!currentQuery.trim() || isLoading}\n                            >\n                              {isLoading ? (\n                                <>\n                                  <svg \n                                    className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" \n                                    xmlns=\"http://www.w3.org/2000/svg\" \n                                    fill=\"none\" \n                                    viewBox=\"0 0 24 24\"\n                                  >\n                                    <circle \n                                      className=\"opacity-25\" \n                                      cx=\"12\" \n                                      cy=\"12\" \n                                      r=\"10\" \n                                      stroke=\"currentColor\" \n                                      strokeWidth=\"4\"\n                                    ></circle>\n                                    <path \n                                      className=\"opacity-75\" \n                                      fill=\"currentColor\" \n                                      d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n                                    ></path>\n                                  </svg>\n                                  Processing...\n                                </>\n                              ) : \"Send\"}\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </main>\n      \n      <Footer />\n    </div>\n  );\n};\n\nexport default Teaching;\n","size_bytes":29496},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1405},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ...props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ...props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2609},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1877},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"import * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10466},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":315},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4879},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7246},"client/src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3835},"client/src/components/ui/drawer.tsx":{"content":"import * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3007},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7361},"client/src/components/ui/form.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4085},"client/src/components/ui/hover-card.tsx":{"content":"import * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1184},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":845},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"import * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst MenubarMenu = MenubarPrimitive.Menu\n\nconst MenubarGroup = MenubarPrimitive.Group\n\nconst MenubarPortal = MenubarPrimitive.Portal\n\nconst MenubarSub = MenubarPrimitive.Sub\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":7974},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5046},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1230},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":777},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"import { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1709},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5615},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"import * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4267},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        if (setOpenProp) {\n          return setOpenProp?.(\n            typeof value === \"function\" ? value(open) : value\n          )\n        }\n\n        _setOpen(value)\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${open}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full text-sidebar-foreground has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23337},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":772},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"import * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1739},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1435},"client/src/components/ui/tooltip.tsx":{"content":"import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1145}},"version":1}